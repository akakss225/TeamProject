[{"/Users/sumin/Desktop/howmuch_front/src/index.js":"1","/Users/sumin/Desktop/howmuch_front/src/serviceWorkerRegistration.js":"2","/Users/sumin/Desktop/howmuch_front/src/App.js":"3","/Users/sumin/Desktop/howmuch_front/src/reportWebVitals.js":"4","/Users/sumin/Desktop/howmuch_front/src/components/BoardMain.js":"5","/Users/sumin/Desktop/howmuch_front/src/components/Mypage.js":"6","/Users/sumin/Desktop/howmuch_front/src/components/Mainpage.js":"7","/Users/sumin/Desktop/howmuch_front/src/components/HotBoardMain.js":"8","/Users/sumin/Desktop/howmuch_front/src/components/Account.js":"9","/Users/sumin/Desktop/howmuch_front/src/components/LoginPage.js":"10","/Users/sumin/Desktop/howmuch_front/src/components/TestLogin.js":"11","/Users/sumin/Desktop/howmuch_front/src/components/Modify.js":"12","/Users/sumin/Desktop/howmuch_front/src/components/Welcome.js":"13","/Users/sumin/Desktop/howmuch_front/src/components/Register.js":"14","/Users/sumin/Desktop/howmuch_front/src/components/DetailBoard.js":"15","/Users/sumin/Desktop/howmuch_front/src/components/ItemCard.js":"16","/Users/sumin/Desktop/howmuch_front/src/components/BoardListPagination.js":"17","/Users/sumin/Desktop/howmuch_front/src/components/ReplyPagination.js":"18"},{"size":4324,"mtime":1641777951000,"results":"19","hashOfConfig":"20"},{"size":5064,"mtime":1638869199000,"results":"21","hashOfConfig":"20"},{"size":1367,"mtime":1641275584000,"results":"22","hashOfConfig":"20"},{"size":364,"mtime":1638869199000,"results":"23","hashOfConfig":"20"},{"size":7868,"mtime":1641777951000,"results":"24","hashOfConfig":"20"},{"size":17668,"mtime":1641777951000,"results":"25","hashOfConfig":"20"},{"size":16173,"mtime":1641777951000,"results":"26","hashOfConfig":"20"},{"size":7895,"mtime":1641777951000,"results":"27","hashOfConfig":"20"},{"size":14129,"mtime":1641777951000,"results":"28","hashOfConfig":"20"},{"size":7381,"mtime":1641777951000,"results":"29","hashOfConfig":"20"},{"size":1206,"mtime":1640852574000,"results":"30","hashOfConfig":"20"},{"size":18331,"mtime":1641777951000,"results":"31","hashOfConfig":"20"},{"size":1306,"mtime":1641777951000,"results":"32","hashOfConfig":"20"},{"size":15151,"mtime":1641867747329,"results":"33","hashOfConfig":"20"},{"size":31594,"mtime":1641781978000,"results":"34","hashOfConfig":"20"},{"size":5581,"mtime":1641777951000,"results":"35","hashOfConfig":"20"},{"size":7645,"mtime":1641777951000,"results":"36","hashOfConfig":"20"},{"size":12267,"mtime":1641782242000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x0r365",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},"/Users/sumin/Desktop/howmuch_front/src/index.js",[],"/Users/sumin/Desktop/howmuch_front/src/serviceWorkerRegistration.js",[],"/Users/sumin/Desktop/howmuch_front/src/App.js",["85"],"import React from \"react\";\nimport \"./App.css\";\nimport { Route, Routes } from \"react-router-dom\";\nimport Mainpage from \"./components/Mainpage\";\nimport LoginPage from \"./components/LoginPage\";\nimport Account from \"./components/Account\";\nimport Welcome from \"./components/Welcome\";\nimport BoardMain from \"./components/BoardMain\";\nimport Register from \"./components/Register\";\nimport Modify from \"./components/Modify\";\nimport DetailBoard from \"./components/DetailBoard\";\nimport Mypage from \"./components/Mypage\";\nimport TestLogin from \"./components/TestLogin\";\nimport HotBoardMain from \"./components/HotBoardMain\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<Mainpage />} />\n        <Route path=\"/:login\" element={<Mainpage />} />\n        <Route path=\"/login\" element={<LoginPage />} />\n        <Route path=\"/account\" element={<Account />} />\n        <Route path=\"/welcome\" element={<Welcome />} />\n        <Route path=\"/boardmain\" element={<BoardMain />} />\n        <Route path=\"/register\" element={<Register />} />\n        <Route path=\"/detail/:bno\" element={<DetailBoard />} />\n        <Route path=\"/modify/:bno\" element={<Modify />} />\n        <Route path=\"/mypage\" element={<Mypage />} />\n        <Route path=\"/hotboard\" element={<HotBoardMain />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/sumin/Desktop/howmuch_front/src/reportWebVitals.js",[],"/Users/sumin/Desktop/howmuch_front/src/components/BoardMain.js",["86","87"],"import React, { useEffect, useState } from \"react\";\nimport { SiCashapp } from \"react-icons/si\";\nimport ReactPaginate from \"react-paginate\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport ItemCard from \"./ItemCard\";\nimport { FaSearch } from \"react-icons/fa\";\nimport { Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nlet TopTitle = styled(\"p\")`\n  font-size: 48px;\n`;\n\nlet Line = styled(\"div\")`\n  width: 80%;\n  height: 5px;\n  background-color: #2d4059;\n  margin: 0 auto;\n`;\n\nconst BoardMain = () => {\n  let dispatch = useDispatch();\n\n  const checkLogin = async () => {\n    await axios\n      .get(\"/checklogin\")\n      .then((result) => {\n        SetCheckUser(result.data);\n        console.log(result.data);\n      })\n      .catch((err) => {\n        console.log(\"please login\");\n      });\n  };\n\n  let [checkUser, SetCheckUser] = useState(\"\");\n\n  const readList = async () => {\n    await axios.get(\"http://localhost:8181/readList\").then((res) => {\n      console.log(\"success\");\n      console.log(res.data);\n      dispatch({\n        type: \"readList\",\n        payload: res.data,\n      });\n    });\n  };\n\n  // const readHotList = async () =>{\n  //   await axios.get(\"http://localhost:8181/readList\")\n  // }\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    checkLogin();\n    readList();\n  }, []);\n\n  let state = useSelector((state) => {\n    return state;\n  });\n\n  let boardState = state.boardReducer;\n\n  // pagination data\n  const items = boardState;\n\n  let [select, SetSelect] = useState(\"\");\n  let [search, SetSearch] = useState(\"\");\n\n  const typeChanger = (select) => {\n    if (select === \"제목\") {\n      return \"title\";\n    } else if (select === \"내용\") {\n      return \"content\";\n    } else if (select === \"작성자\") {\n      return \"writer\";\n    } else if (select === \"태그\") {\n      return \"tag\";\n    }\n  };\n\n  let navigate = useNavigate();\n\n  // pagination\n  function Items({ currentItems }) {\n    return (\n      <>\n        <div className=\"container-lg\" style={{ margin: \"50px auto\" }}>\n          <div className=\"row\">\n            {currentItems === \"\" ? (\n              <p style={{ fontSize: \"32px\" }}>아직 등록된 게시물이 없습니다.</p>\n            ) : (\n              currentItems &&\n              currentItems.map((item, index) => (\n                <div\n                  className=\"col-lg-4 d-flex justify-content-center\"\n                  key={index}\n                  onClick={() => {\n                    navigate(\"/detail/\" + item.bno);\n                    console.log(item);\n                  }}\n                >\n                  <ItemCard item={item} />\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  function PaginatedItems({ itemsPerPage }) {\n    // We start with an empty list of items.\n    const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0);\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useState(0);\n\n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]);\n\n    // Invoke when user click to request another page.\n    const handlePageClick = (event) => {\n      const newOffset = (event.selected * itemsPerPage) % items.length;\n      console.log(\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\n      );\n      setItemOffset(newOffset);\n    };\n\n    return (\n      <>\n        <Items currentItems={currentItems} />\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <ReactPaginate\n            nextLabel=\">\"\n            onPageChange={handlePageClick}\n            pageRangeDisplayed={5}\n            marginPagesDisplayed={0}\n            pageCount={pageCount}\n            previousLabel=\"<\"\n            pageClassName=\"page-item\"\n            pageLinkClassName=\"page-link\"\n            previousClassName=\"page-item\"\n            previousLinkClassName=\"page-link\"\n            nextClassName=\"page-item\"\n            nextLinkClassName=\"page-link\"\n            breakLabel=\"\"\n            breakClassName=\"page-item\"\n            breakLinkClassName=\"page-link\"\n            containerClassName=\"pagination\"\n            activeClassName=\"active\"\n            renderOnZeroPageCount={null}\n          />\n        </div>\n      </>\n    );\n  }\n  // end pagination\n\n  return (\n    <div>\n      <div className=\"cotainer-lg\">\n        <div\n          className=\"row d-flex justify-content-center\"\n          style={{ width: \"100%\", paddingTop: \"50px\" }}\n        >\n          <div\n            className=\"col-lg-1\"\n            onClick={() => {\n              navigate(\"/\");\n            }}\n            style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{ color: \"#EA5455\", fontSize: \"70px\", margin: \"0 20px\" }}\n            />\n          </div>\n          <div className=\"col-lg-9\">\n            <TopTitle>Check items & Feed back</TopTitle>\n          </div>\n        </div>\n      </div>\n      <Line></Line>\n      <div\n        className=\"container-lg\"\n        style={{\n          padding: \"30px 30px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <FaSearch\n            onClick={async () => {\n              let search = document.getElementById(\"search\").value;\n              SetSearch(search);\n\n              console.log(search, select);\n\n              if (search === \"\" && select === \"\") {\n                console.log(\"검색항목을 선택하고 검색어를 입력해주세요\");\n                return;\n              }\n\n              await axios({\n                url: \"/getSearchList\",\n                method: \"get\",\n                params: {\n                  type: select,\n                  keyword: search,\n                },\n              }).then((res) => {\n                console.log(res.data);\n                dispatch({\n                  type: \"searchList\",\n                  payload: res.data,\n                });\n              });\n            }}\n            style={{ fontSize: \"24px\", marginRight: \"10px\", cursor: \"pointer\" }}\n          />\n          <input id=\"search\" type=\"text\" placeholder=\"검색어를 입력해주세요\" />\n          <div style={{ marginLeft: \"20px\" }}>\n            <select\n              id=\"tagSelect\"\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n              onChange={(e) => {\n                SetSelect(\n                  typeChanger(e.target.options[e.target.selectedIndex].text)\n                );\n              }}\n            >\n              <option defaultValue>검색항목</option>\n              <option value=\"1\">제목</option>\n              <option value=\"2\">내용</option>\n              <option value=\"3\">작성자</option>\n              <option value=\"4\">태그</option>\n            </select>\n          </div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n          }}\n        >\n          <Button\n            onClick={() => {\n              if (checkUser) {\n                navigate(\"/register\");\n              } else {\n                navigate(\"/login\");\n              }\n            }}\n          >\n            글등록\n          </Button>\n        </div>\n      </div>\n      <PaginatedItems itemsPerPage={6} />\n    </div>\n  );\n};\n\nexport default BoardMain;\n","/Users/sumin/Desktop/howmuch_front/src/components/Mypage.js",["88","89"],"import React, { useEffect, useState } from \"react\";\nimport { SiCashapp } from \"react-icons/si\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { FaRegHandPointRight } from \"react-icons/fa\";\nimport { MdNotificationImportant } from \"react-icons/md\";\nimport { RiVipCrownFill } from \"react-icons/ri\";\nimport { IoWallet } from \"react-icons/io5\";\nimport { BiCoinStack } from \"react-icons/bi\";\nimport axios from \"axios\";\n\nconst Mypage = () => {\n  let navigate = useNavigate();\n\n  let API_URL = \"http://localhost:3000\";\n\n  const getMyInfo = async () => {\n    await axios\n      .get(API_URL + \"/userinfo\")\n      .then((result) => {\n        console.log(result.data);\n        SetInfo(result.data);\n      })\n      .catch((error) => {\n        console.log(error);\n        navigate(\"/login\");\n        // navigate(\"/login\");\n      });\n  };\n\n  useEffect(() => {\n    getMyInfo();\n  }, []);\n\n  let [userInfo, SetInfo] = useState(\"\");\n\n  const tierSelect = (point) => {\n    if (point < 250) {\n      // SetTier(\"Bronze\");\n      return \"Bronze\";\n    } else if (point < 500) {\n      // SetTier(\"Silver\");\n      return \"Silver\";\n    } else if (point < 750) {\n      // SetTier(\"Gold\");\n      return \"Gold\";\n    } else if (point < 1000) {\n      // SetTier(\"Platinum\");\n      return \"Platinum\";\n    } else {\n      // SetTier(\"Diamond\");\n      return \"Diamond\";\n    }\n  };\n\n  const pointGap = (point) => {\n    if (point < 250) {\n      return 250 - point;\n    } else if (point < 500) {\n      // SetTier(\"Silver\");\n      return 500 - point;\n    } else if (point < 750) {\n      // SetTier(\"Gold\");\n      return 750 - point;\n    } else if (point < 1000) {\n      // SetTier(\"Platinum\");\n      return 1000 - point;\n    } else {\n      // SetTier(\"Diamond\");\n      return \"super\";\n    }\n  };\n\n  let [boardRank, SetboardRank] = useState([]);\n\n  let [memberRank, SetmemberRank] = useState([]);\n\n  const getBoardRank = async () => {\n    await axios\n      .get(API_URL + \"/BoardRank\")\n      .then((result) => {\n        console.log(result.data);\n        SetboardRank(result.data);\n      })\n      .catch((error) => {\n        console.log(error);\n        console.log(\"board rank err\");\n      });\n  };\n\n  const getTierRank = async () => {\n    await axios\n      .get(API_URL + \"/TierRank\")\n      .then((result) => {\n        console.log(result.data);\n        SetmemberRank(result.data);\n      })\n      .catch((error) => {\n        console.log(error);\n        console.log(\"tier rank err\");\n      });\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    getBoardRank();\n    getTierRank();\n  }, []);\n\n  const tierObject = [\n    { tier: \"Diamond\", color: \"#548CFF\" },\n    { tier: \"Platinum\", color: \"#00BDAA\" },\n    { tier: \"Gold\", color: \"#FFE300\" },\n    { tier: \"Silver\", color: \"#C8C2BC\" },\n    { tier: \"Bronze\", color: \"#E26A2C\" },\n  ];\n\n  const findTier = (userTier) => {\n    console.log(userTier);\n\n    let findItem = tierObject.find((item) => {\n      return item.tier === userTier;\n    });\n\n    console.log(findItem);\n    console.log(findItem.color);\n\n    return findItem.color;\n  };\n\n  // let sampleData = [\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     score: 0,\n  //     posting: 0,\n  //   },\n  // ];\n\n  // let sampleData2 = [\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"diamond\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"platinum\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"platinum\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"gold\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"gold\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"gold\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"silver\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"silver\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"bronze\",\n  //     point: 0,\n  //   },\n  //   {\n  //     nick: \"user01\",\n  //     tier: \"bronze\",\n  //     point: 0,\n  //   },\n  // ];\n\n  // useEffect(() => {\n  //   SetboardRank(sampleData);\n  //   SetmemberRank(sampleData2);\n  // }, []);\n\n  // styled component\n  let TopTitle = styled(\"p\")`\n    font-size: 48px;\n  `;\n\n  let Line = styled(\"div\")`\n    width: 80%;\n    height: 5px;\n    background-color: #2d4059;\n    margin: 0 auto;\n  `;\n\n  let SmallLine = styled(\"div\")`\n    width: 70%;\n    height: 3px;\n    background-color: #2d4059;\n    margin: 70px auto;\n  `;\n  // end styled component\n\n  console.log(boardRank);\n  console.log(memberRank);\n\n  return (\n    <div>\n      <div className=\"cotainer-lg\">\n        <div\n          className=\"row d-flex justify-content-center\"\n          style={{ width: \"100%\", paddingTop: \"50px\" }}\n        >\n          <div\n            className=\"col-lg-1\"\n            onClick={() => {\n              navigate(\"/\");\n            }}\n            style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{ color: \"#EA5455\", fontSize: \"70px\", margin: \"0 20px\" }}\n            />\n          </div>\n          <div className=\"col-lg-9\">\n            <TopTitle>Check your point !!</TopTitle>\n          </div>\n        </div>\n      </div>\n      <Line></Line>\n\n      {/* start tier */}\n      <div className=\"container-lg \" style={{ marginTop: \"50px\" }}>\n        <div\n          className=\"row\"\n          style={{\n            border: \"2px solid #EA5455\",\n            borderRadius: \"7px\",\n            margin: \"0 20px\",\n          }}\n        >\n          <div\n            className=\"col-lg-2\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <MdNotificationImportant style={{ fontSize: \"20px\" }} />\n            <span style={{ margin: \"0 10px\" }}>회원등급표</span>{\" \"}\n            <FaRegHandPointRight />\n          </div>\n          <div\n            className=\"col-lg-2\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <RiVipCrownFill color=\"#548CFF\" />\n            <span style={{ margin: \"0 10px\" }}>다이아</span>\n            <span>1000점</span>\n          </div>\n          <div\n            className=\"col-lg-2\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <RiVipCrownFill color=\"#00BDAA\" />\n            <span style={{ margin: \"0 10px\" }}>플래티넘</span>\n            <span>750점</span>\n          </div>\n          <div\n            className=\"col-lg-2\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <RiVipCrownFill color=\"#FFE300\" />\n            <span style={{ margin: \"0 10px\" }}>골드</span>\n            <span>500점</span>\n          </div>\n          <div\n            className=\"col-lg-2\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <RiVipCrownFill color=\"#C8C2BC\" />\n            <span style={{ margin: \"0 10px\" }}>실버</span>\n            <span>250점</span>\n          </div>\n          <div\n            className=\"col-lg-2\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <RiVipCrownFill color=\"#E26A2C\" />\n            <span style={{ margin: \"0 10px\" }}>브론즈</span>\n            <span>0점</span>\n          </div>\n        </div>\n      </div>\n      {/* end tier */}\n\n      {/* start value input */}\n      <div\n        className=\"container-lg d-flex justify-content-center\"\n        style={{ marginTop: \"100px\" }}\n      >\n        <div\n          style={{\n            width: \"80%\",\n            height: \"500px\",\n            border: \"3px solid #2D4059\",\n            display: \"flex\",\n            flexFlow: \"column wrap\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n            borderRadius: \"7px\",\n          }}\n        >\n          <div\n            style={{\n              fontSize: \"24px\",\n              display: \"flex\",\n              width: \"100%\",\n              justifyContent: \"center\",\n            }}\n          >\n            <IoWallet\n              color=\"#EA5455\"\n              size={\"32px\"}\n              style={{ marginRight: \"1%\" }}\n            />\n            <span>{userInfo.nick} 님의 포인트는 ... ?</span>\n          </div>\n          <div\n            style={{\n              width: \"70%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <BiCoinStack style={{ fontSize: \"32px\", color: \"#EA5455\" }} />\n            <div\n              style={{\n                color: \"black\",\n                width: \"50%\",\n                fontSize: \"24px\",\n                borderBottom: \"2px solid #EA5455\",\n              }}\n            >\n              {userInfo.point}\n            </div>\n            <span style={{ fontSize: \"32px\" }}>point</span>\n          </div>\n          <div style={{ fontSize: \"24px\" }}>{userInfo.nick} 님의 등급은</div>\n          <RiVipCrownFill\n            size=\"48px\"\n            color={findTier(tierSelect(userInfo.point))}\n          />\n          <div style={{ fontSize: \"24px\" }}>\n            {pointGap(userInfo.point) === \"super\"\n              ? \"이미 최고 등급입니다! 현재 점수 : \" + userInfo.point\n              : \"다음 등급까지 \" +\n                pointGap(userInfo.point) +\n                \" 포인트 남았습니다!\"}\n          </div>\n          <div>\n            <p>\n              자신만의 아이디어나 일상 등을 공유하여 더 많은 포인트를 얻어보세요\n              !!\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* end value input */}\n\n      <SmallLine></SmallLine>\n\n      {/* start rank */}\n      <div className=\"container-lg\" style={{ paddingBottom: \"100px\" }}>\n        <div className=\"row\">\n          <div className=\"col-lg-6\" style={{ marginTop: \"30px\" }}>\n            <div\n              style={{ textAlign: \"left\", fontSize: \"24px\", padding: \"10px 0\" }}\n            >\n              게시물 랭킹\n            </div>\n            <div\n              style={{\n                border: \"3px solid #2D4059\",\n                borderRadius: \"7px\",\n                backgroundColor: \"#2D4059\",\n                padding: \"10px\",\n                display: \"flex\",\n                flexFlow: \"column wrap\",\n                justifyContent: \"space-evenly\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-around\",\n                  margin: \"10px 0\",\n                }}\n              >\n                <div\n                  style={{\n                    width: \"40px\",\n                    backgroundColor: \"#FFD460\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  순위\n                </div>\n                <div\n                  style={{\n                    width: \"200px\",\n                    backgroundColor: \"#FFD460\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  닉네임\n                </div>\n                <div\n                  style={{\n                    width: \"100px\",\n                    backgroundColor: \"#EA5455\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  인기도\n                </div>\n              </div>\n              {boardRank.map((item, index) => {\n                return (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-around\",\n                      margin: \"10px 0\",\n                    }}\n                    key={index}\n                  >\n                    <div\n                      style={{\n                        width: \"40px\",\n                        backgroundColor: \"#FFD460\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      {index + 1}\n                    </div>\n                    <div\n                      style={{\n                        width: \"200px\",\n                        backgroundColor: \"#FFD460\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      {item.nick}\n                    </div>\n                    <div\n                      style={{\n                        width: \"100px\",\n                        backgroundColor: \"#EA5455\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      {item.score}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"col-lg-6\" style={{ marginTop: \"30px\" }}>\n            <div\n              style={{ textAlign: \"left\", fontSize: \"24px\", padding: \"10px 0\" }}\n            >\n              포인트 랭킹\n            </div>\n            <div\n              style={{\n                border: \"3px solid #2D4059\",\n                borderRadius: \"7px\",\n                backgroundColor: \"#2D4059\",\n                padding: \"10px\",\n                display: \"flex\",\n                flexFlow: \"column wrap\",\n                justifyContent: \"space-evenly\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-around\",\n                  margin: \"10px 0\",\n                }}\n              >\n                <div\n                  style={{\n                    width: \"40px\",\n                    backgroundColor: \"#FFD460\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  순위\n                </div>\n                <div\n                  style={{\n                    width: \"100px\",\n                    backgroundColor: \"#FFD460\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  닉네임\n                </div>\n                <div\n                  style={{\n                    width: \"100px\",\n                    backgroundColor: \"white\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  등급\n                </div>\n                <div\n                  style={{\n                    width: \"100px\",\n                    backgroundColor: \"#EA5455\",\n                    borderRadius: \"5px\",\n                  }}\n                >\n                  포인트\n                </div>\n              </div>\n              {memberRank.map((item, index) => {\n                return (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-around\",\n                      margin: \"10px 0\",\n                    }}\n                    key={index}\n                  >\n                    <div\n                      style={{\n                        width: \"40px\",\n                        backgroundColor: \"#FFD460\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      {index + 1}\n                    </div>\n                    <div\n                      style={{\n                        width: \"100px\",\n                        backgroundColor: \"#FFD460\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      {item.nick}\n                    </div>\n                    <div\n                      style={{\n                        width: \"100px\",\n                        backgroundColor: \"white\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      <RiVipCrownFill\n                        color={findTier(item.tier)}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      {item.tier}\n                    </div>\n                    <div\n                      style={{\n                        width: \"100px\",\n                        backgroundColor: \"#EA5455\",\n                        borderRadius: \"5px\",\n                      }}\n                    >\n                      {item.point}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Mypage;\n","/Users/sumin/Desktop/howmuch_front/src/components/Mainpage.js",["90"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Container, Nav, Navbar } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SiCashapp } from \"react-icons/si\";\nimport styled from \"styled-components\";\nimport Banner from \"../img/banner.svg\";\nimport ItemCard from \"./ItemCard\";\nimport BoardImg from \"../img/board.png\";\nimport PointImg from \"../img/point.png\";\nimport ValueImg from \"../img/value.png\";\nimport { IoShareSocialSharp } from \"react-icons/io5\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BiArrowToTop } from \"react-icons/bi\";\nimport Cookies from \"universal-cookie\";\nimport axios from \"axios\";\n\nconst Mainpage = () => {\n  // redux\n\n  let API_URL = \"http://localhost:3000\";\n\n  const checkLogin = async () => {\n    await axios\n      .get(API_URL + \"/checklogin\")\n      .then((result) => {\n        SetCheckUser(result.data);\n        console.log(result.data);\n      })\n      .catch((err) => {\n        console.log(\"please login\");\n      });\n  };\n\n  let [checkUser, SetCheckUser] = useState(\"\");\n\n  let dispatch = useDispatch();\n\n  const readList = async () => {\n    await axios.get(\"http://localhost:3000/readList\").then((res) => {\n      console.log(\"success\");\n      console.log(res.data);\n      dispatch({\n        type: \"readList\",\n        payload: res.data,\n      });\n    });\n  };\n\n  const readHotList = async () => {\n    await axios.get(\"http://localhost:8181/hotList\").then((res) => {\n      console.log(\"success\");\n      console.log(res.data);\n      dispatch({\n        type: \"readHotList\",\n        payload: res.data,\n      });\n    });\n  };\n\n  useEffect(() => {\n    checkLogin();\n    readList();\n    readHotList();\n  }, []);\n\n  let state = useSelector((state) => {\n    return state;\n  });\n\n  let boardState = state.boardReducer;\n\n  let hotBoardState = state.hotBoardReducer;\n\n  console.log(boardState);\n\n  let hotBoard = [...hotBoardState.slice(0, 3)];\n\n  console.log(hotBoard);\n\n  let newBoard = [...boardState.slice(0, 3)];\n\n  console.log(newBoard);\n\n  // end redux\n\n  // cookie\n\n  let csrf = new Cookies().get(\"XSRF-TOKEN\");\n  console.log(csrf);\n\n  // end cookie\n\n  let currentImageWidth = document.documentElement.clientWidth;\n\n  let [imageWidth, imageWidthChange] = useState(\"600px\");\n\n  let [rowAlign, rowAlignChange] = useState(\"space-between\");\n\n  window.addEventListener(\"resize\", () => {\n    let screenWidth = document.documentElement.clientWidth;\n\n    if (screenWidth <= 990) {\n      imageWidthChange(\"450px\");\n      rowAlignChange(\"center\");\n    }\n\n    if (screenWidth > 990) {\n      imageWidthChange(\"600px\");\n      rowAlignChange(\"space-between\");\n    }\n  });\n\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    if (currentImageWidth <= 990) {\n      imageWidthChange(\"450px\");\n      rowAlignChange(\"center\");\n    }\n  }, [currentImageWidth]);\n\n  let [TbtnOpa, TbtnOpaChange] = useState(0);\n\n  window.addEventListener(\"scroll\", () => {\n    let screenScroll = document.documentElement.scrollTop;\n\n    if (screenScroll > 1000) {\n      TbtnOpaChange(1);\n    }\n\n    if (screenScroll <= 1000) {\n      TbtnOpaChange(0);\n    }\n  });\n\n  // console.log(imageWidth);\n\n  // style component\n\n  let Jumbo = styled(\"div\")`\n    background-color: #ffd460;\n    padding-top: 110px;\n  `;\n\n  let Line = styled(\"div\")`\n    border-bottom: 3px solid #2d4059;\n    margin: 150px auto;\n  `;\n\n  let GuideText = styled(\"div\")`\n    text-align: left;\n    padding: 20px 0 20px 60px;\n  `;\n\n  let GuideTitle = styled(\"div\")`\n    text-align: left;\n    font-size: 28px;\n    display: flex;\n  `;\n\n  let NumberBox = styled(\"span\")`\n    border: 3px solid black;\n    padding: 0 10px;\n    margin-right: 20px;\n    height: 45px;\n  `;\n\n  let Footer = styled(\"div\")`\n    padding-top: 40px;\n    padding-bottom: 40px;\n    background-color: #2d4059;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: center;\n    color: white;\n    text-align: left;\n  `;\n\n  let TopBtn = styled(\"div\")`\n    position: fixed;\n    transition: all 1s;\n    bottom: 30px;\n    right: 30px;\n    width: 40px;\n    height: 40px;\n    background-color: #f07b3f;\n    color: #2d4059;\n    font-size: 24px;\n    border-radius: 7px;\n    cursor: pointer;\n    opacity: ${(props) => props.TbtnOpa};\n  `;\n\n  // end style component\n\n  return (\n    <div>\n      {/* navbar */}\n      <Navbar\n        fixed=\"top\"\n        variant=\"dark\"\n        expand=\"lg\"\n        style={{ backgroundColor: \"#2D4059\" }}\n      >\n        <Container style={{ maxWidth: \"1400px\" }}>\n          <div\n            className=\"d-flex align-items-center\"\n            onClick={() => {\n              window.scrollTo(0, 0);\n            }}\n            style={{ cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{\n                color: \"#EA5455\",\n                fontSize: \"70px\",\n                margin: \"0 20px\",\n              }}\n            />\n            <Navbar.Brand\n              style={{\n                color: \"white\",\n                fontSize: \"50px\",\n                paddingTop: \"15px\",\n                fontWeight: \"bold\",\n              }}\n            >\n              How Much ?\n            </Navbar.Brand>\n          </div>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"fixnav basic-navbar-nav\">\n            <Nav\n              className=\"d-flex justify-content-around\"\n              style={{ width: \"400px\" }}\n            >\n              <Nav.Link\n                onClick={() => {\n                  navigate(\"/login\");\n                }}\n                style={{ color: \"white\", fontSize: \"24px\" }}\n              >\n                {checkUser ? (\n                  <form\n                    id=\"logout\"\n                    action=\"http://localhost:8181/logout\"\n                    method=\"post\"\n                  >\n                    <span\n                      onClick={() => {\n                        let form = document.getElementById(\"logout\");\n\n                        form.submit();\n                      }}\n                    >\n                      로그아웃\n                    </span>\n                    <input type=\"hidden\" name=\"_csrf\" value={csrf} />\n                  </form>\n                ) : (\n                  <span>로그인</span>\n                )}\n              </Nav.Link>\n              <Nav.Link\n                onClick={() => {\n                  navigate(\"/account\");\n                }}\n                style={{ color: \"white\", fontSize: \"24px\" }}\n              >\n                회원가입\n              </Nav.Link>\n              <Nav.Link\n                onClick={() => {\n                  checkUser ? navigate(\"/mypage\") : navigate(\"/login\");\n                }}\n                style={{ color: \"white\", fontSize: \"24px\" }}\n              >\n                마이 포인트\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      {/* jumbotron */}\n      <Jumbo>\n        <div\n          style={{\n            position: \"relative\",\n            paddingTop: \"100px\",\n            paddingBottom: \"150px\",\n          }}\n        >\n          <p\n            style={{\n              fontSize: \"24px\",\n              position: \"absolute\",\n              top: \"50px\",\n              left: \"50px\",\n            }}\n          >\n            당신이 가진 어떤 것도{\" \"}\n            <span style={{ borderBottom: \"2px solid #EA5455\" }}>\n              재미있는 가치\n            </span>\n            가 된다 !\n          </p>\n          <img src={Banner} alt=\"banner\" style={{ width: imageWidth }} />\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"10px\",\n              left: \"50px\",\n              textAlign: \"left\",\n            }}\n          >\n            <p style={{ fontSize: \"24px\" }}>\n              모든 컨텐츠는 결국 <span style={{ color: \"#EA5455\" }}>사람</span>\n              이니까,\n            </p>\n            <p style={{ fontSize: \"24px\" }}>\n              당신만의 무언가에{\" \"}\n              <span style={{ borderBottom: \"2px solid #EA5455\" }}>\n                가치를 매겨보세요 !\n              </span>\n            </p>\n            <Button\n              onClick={() => {\n                if (checkUser) {\n                  navigate(\"/register\");\n                } else {\n                  navigate(\"/login\");\n                }\n              }}\n              style={{ backgroundColor: \"#EA5455\", border: \"none\" }}\n            >\n              시작하기\n            </Button>\n          </div>\n        </div>\n      </Jumbo>\n\n      {/* item list */}\n\n      <div className=\"container-lg\" style={{ margin: \"80px auto\" }}>\n        <div\n          className=\"row\"\n          style={{\n            margin: \"30px 0\",\n            fontSize: \"32px\",\n            display: \"flex\",\n            justifyContent: rowAlign,\n          }}\n        >\n          <div className=\"col-lg-2\">인기 평가물</div>\n          <div\n            className=\"col-lg-2\"\n            onClick={() => {\n              navigate(\"/hotboard\");\n            }}\n            style={{ fontSize: \"24px\", cursor: \"pointer\" }}\n          >\n            + 더보기\n          </div>\n        </div>\n        <div className=\"row\">\n          {hotBoard.length === 0 ? (\n            <p style={{ fontSize: \"20px\" }}>아직 인기 게시물이 없습니다.</p>\n          ) : (\n            hotBoard.map((item, index) => {\n              return (\n                <div\n                  className=\"col-lg-4 d-flex justify-content-center\"\n                  key={index}\n                  onClick={() => {\n                    navigate(\"/detail/\" + item.bno);\n                    console.log(item);\n                  }}\n                >\n                  <ItemCard item={item} />\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n      <div className=\"container-lg\" style={{ margin: \"80px auto\" }}>\n        <div\n          className=\"row\"\n          style={{\n            margin: \"30px 0\",\n            fontSize: \"32px\",\n            display: \"flex\",\n            justifyContent: rowAlign,\n          }}\n        >\n          <div className=\"col-lg-2\">새 평가물</div>\n          <div\n            className=\"col-lg-2\"\n            onClick={() => {\n              navigate(\"/boardmain\");\n            }}\n            style={{ fontSize: \"24px\", cursor: \"pointer\" }}\n          >\n            + 더보기\n          </div>\n        </div>\n        <div className=\"row\">\n          {newBoard.length === 0 ? (\n            <p style={{ fontSize: \"20px\" }}>아직 등록된 게시물이 없습니다.</p>\n          ) : (\n            newBoard.map((item, index) => {\n              return (\n                <div\n                  className=\"col-lg-4 d-flex justify-content-center\"\n                  key={index}\n                  onClick={() => {\n                    navigate(\"/detail/\" + item.bno);\n                    console.log(item);\n                  }}\n                >\n                  <ItemCard item={item} />\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n\n      <Line className=\"container-lg\"></Line>\n\n      {/* user guide */}\n      <div className=\"container-lg\" style={{ margin: \"80px auto\" }}>\n        <div className=\"row\" style={{ marginBottom: \"120px\" }}>\n          <span style={{ fontSize: \"32px\" }}>\n            우리의 관심사는 당신의 상상력 넘치는{\" \"}\n            <span style={{ color: \"#F07B3F\" }}>모든 것</span>\n          </span>\n        </div>\n        <div\n          className=\"row d-flex justify-content-around\"\n          style={{ marginBottom: \"150px\" }}\n        >\n          <div className=\"col-lg-5\">\n            <GuideTitle>\n              <NumberBox>1</NumberBox> 당신의 어떤 것이든 공유해보세요.\n            </GuideTitle>\n            <GuideText>\n              <p>\n                상상력 넘치는 아이디어, 웃긴 사진, 자신만의 짤, 유용한 정보글\n                혹은 실제 자신의 평가 받고 싶은 물건까지 ... !\n              </p>\n              <p>전부 포스팅하여 가치를 알아보고 실제 포인트로 받아보세요 !</p>\n            </GuideText>\n          </div>\n          <div className=\"col-lg-5\">\n            <img\n              src={BoardImg}\n              alt=\"guideImage\"\n              style={{ width: \"100%\", padding: \"20px\" }}\n            ></img>\n          </div>\n        </div>\n\n        <div\n          className=\"row d-flex justify-content-around\"\n          style={{ marginBottom: \"150px\" }}\n        >\n          <div className=\"col-lg-5\">\n            <GuideTitle>\n              <NumberBox>2</NumberBox>\n              <span> 다른 유저의 모든 것을 평가해보세요.</span>\n            </GuideTitle>\n            <GuideText>\n              <p>\n                자신의 가치만 평가받지 말고 다른 사람의 생각과 물건을 평가하고\n                서로의 생각을 공유해보세요!\n              </p>\n              <p>당신의 평가가 실제 가치가 됩니다.</p>\n            </GuideText>\n          </div>\n          <div className=\"col-lg-5\">\n            <img\n              src={ValueImg}\n              alt=\"guideImage\"\n              style={{ width: \"100%\", padding: \"20px\" }}\n            ></img>\n          </div>\n        </div>\n\n        <div\n          className=\"row d-flex justify-content-around\"\n          style={{ marginBottom: \"150px\" }}\n        >\n          <div className=\"col-lg-5\">\n            <GuideTitle>\n              <NumberBox>3</NumberBox> 가치를 포인트로 받고 사용해보세요.\n            </GuideTitle>\n            <GuideText>\n              <p>\n                평가받은 포인트를 이용해 회원 등급을 올리거나 포인트샵에서\n                다양한 상품을 구매할 수 있습니다.\n              </p>\n            </GuideText>\n          </div>\n          <div className=\"col-lg-5\">\n            <img\n              src={PointImg}\n              alt=\"guideImage\"\n              style={{ width: \"100%\", padding: \"20px\" }}\n            ></img>\n          </div>\n        </div>\n      </div>\n\n      {/* footer */}\n      <Footer className=\"container-fluid\">\n        <div className=\"row d-flex justify-content-center\">\n          <div className=\"col-6\">\n            <IoShareSocialSharp\n              style={{\n                fontSize: \"28px\",\n                marginRight: \"20px\",\n                backgroundColor: \"#EA5455\",\n                padding: \"2px\",\n                borderRadius: \"5px\",\n              }}\n            />\n            소셜네트워크는 준비중에 있습니다.\n          </div>\n        </div>\n        <div className=\"row d-flex justify-content-center\">\n          <div className=\"col-6\" style={{ height: \"250px\" }}>\n            <p>이용약관</p>\n            <p>\n              1. 해당 경매는 재미를 위한 것으로 실제 경매 거래와는 차이가 있음을\n              알립니다.\n            </p>\n            <p>\n              2. 경매된 포인트는 정산 후 익일 지급되며 해당 포인트는 등급,\n              포인트 샵등의 사이트 내에서만 이용이 가능합니다. <br />\n              (추후 기프티콘 연계등의 확장 계획에 있음)\n            </p>\n          </div>\n        </div>\n        <div className=\"row d-flex justify-content-center\">\n          <div className=\"col-6\" style={{ height: \"150px\" }}>\n            <p>\n              회사명: howmuch company <br />\n              사업자 등록 번호 : 0000-0000-0000 <br />\n              주소 : 서울시 oooo oooo xxxx xxxx <br />\n              전화번호 : 02-xxx-xxxx\n            </p>\n          </div>\n        </div>\n        <div className=\"row d-flex justify-content-center\">\n          <div className=\"col-6\" style={{ height: \"20px\" }}>\n            Copyright©2021 Alright reserved by howmuch\n          </div>\n        </div>\n      </Footer>\n      {/* top btn */}\n      <TopBtn\n        TbtnOpa={TbtnOpa}\n        onClick={() => {\n          window.scrollTo(0, 0);\n        }}\n      >\n        <BiArrowToTop />\n      </TopBtn>\n    </div>\n  );\n};\n\nexport default Mainpage;\n","/Users/sumin/Desktop/howmuch_front/src/components/HotBoardMain.js",["91","92"],"import React, { useEffect, useState } from \"react\";\nimport { SiCashapp } from \"react-icons/si\";\nimport ReactPaginate from \"react-paginate\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport ItemCard from \"./ItemCard\";\nimport { FaSearch } from \"react-icons/fa\";\nimport { Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nlet TopTitle = styled(\"p\")`\n  font-size: 48px;\n`;\n\nlet Line = styled(\"div\")`\n  width: 80%;\n  height: 5px;\n  background-color: #2d4059;\n  margin: 0 auto;\n`;\n\nconst HotBoardMain = () => {\n  let dispatch = useDispatch();\n\n  const checkLogin = async () => {\n    await axios\n      .get(\"/checklogin\")\n      .then((result) => {\n        SetCheckUser(result.data);\n        console.log(result.data);\n      })\n      .catch((err) => {\n        console.log(\"please login\");\n      });\n  };\n\n  let [checkUser, SetCheckUser] = useState(\"\");\n\n  const readHotList = async () => {\n    await axios.get(\"http://localhost:8181/hotList\").then((res) => {\n      console.log(\"success\");\n      console.log(res.data);\n      dispatch({\n        type: \"readHotList\",\n        payload: res.data,\n      });\n    });\n  };\n\n  // const readHotList = async () =>{\n  //   await axios.get(\"http://localhost:8181/readList\")\n  // }\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    checkLogin();\n    readHotList();\n  }, []);\n\n  let state = useSelector((state) => {\n    return state;\n  });\n\n  let hotBoardState = state.hotBoardReducer;\n\n  // pagination data\n  const items = hotBoardState;\n\n  let [select, SetSelect] = useState(\"\");\n  let [search, SetSearch] = useState(\"\");\n\n  const typeChanger = (select) => {\n    if (select === \"제목\") {\n      return \"title\";\n    } else if (select === \"내용\") {\n      return \"content\";\n    } else if (select === \"작성자\") {\n      return \"writer\";\n    } else if (select === \"태그\") {\n      return \"tag\";\n    }\n  };\n\n  let navigate = useNavigate();\n\n  // pagination\n  function Items({ currentItems }) {\n    return (\n      <>\n        <div className=\"container-lg\" style={{ margin: \"50px auto\" }}>\n          <div className=\"row\">\n            {currentItems === \"\" ? (\n              <p style={{ fontSize: \"32px\" }}>아직 인기 게시물이 없습니다.</p>\n            ) : (\n              currentItems &&\n              currentItems.map((item, index) => (\n                <div\n                  className=\"col-lg-4 d-flex justify-content-center\"\n                  key={index}\n                  onClick={() => {\n                    navigate(\"/detail/\" + item.bno);\n                    console.log(item);\n                  }}\n                >\n                  <ItemCard item={item} />\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  function PaginatedItems({ itemsPerPage }) {\n    // We start with an empty list of items.\n    const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0);\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useState(0);\n\n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]);\n\n    // Invoke when user click to request another page.\n    const handlePageClick = (event) => {\n      const newOffset = (event.selected * itemsPerPage) % items.length;\n      console.log(\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\n      );\n      setItemOffset(newOffset);\n    };\n\n    return (\n      <>\n        <Items currentItems={currentItems} />\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <ReactPaginate\n            nextLabel=\">\"\n            onPageChange={handlePageClick}\n            pageRangeDisplayed={5}\n            marginPagesDisplayed={0}\n            pageCount={pageCount}\n            previousLabel=\"<\"\n            pageClassName=\"page-item\"\n            pageLinkClassName=\"page-link\"\n            previousClassName=\"page-item\"\n            previousLinkClassName=\"page-link\"\n            nextClassName=\"page-item\"\n            nextLinkClassName=\"page-link\"\n            breakLabel=\"\"\n            breakClassName=\"page-item\"\n            breakLinkClassName=\"page-link\"\n            containerClassName=\"pagination\"\n            activeClassName=\"active\"\n            renderOnZeroPageCount={null}\n          />\n        </div>\n      </>\n    );\n  }\n  // end pagination\n\n  return (\n    <div>\n      <div className=\"cotainer-lg\">\n        <div\n          className=\"row d-flex justify-content-center\"\n          style={{ width: \"100%\", paddingTop: \"50px\" }}\n        >\n          <div\n            className=\"col-lg-1\"\n            onClick={() => {\n              navigate(\"/\");\n            }}\n            style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{ color: \"#EA5455\", fontSize: \"70px\", margin: \"0 20px\" }}\n            />\n          </div>\n          <div className=\"col-lg-9\">\n            <TopTitle>Check Hot items & Feed back</TopTitle>\n          </div>\n        </div>\n      </div>\n      <Line></Line>\n      <div\n        className=\"container-lg\"\n        style={{\n          padding: \"30px 30px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <FaSearch\n            onClick={async () => {\n              let search = document.getElementById(\"search\").value;\n              SetSearch(search);\n\n              console.log(search, select);\n\n              if (search === \"\" && select === \"\") {\n                console.log(\"검색항목을 선택하고 검색어를 입력해주세요\");\n                return;\n              }\n\n              await axios({\n                url: \"/getSearchList\",\n                method: \"get\",\n                params: {\n                  type: select,\n                  keyword: search,\n                },\n              }).then((res) => {\n                console.log(res.data);\n                dispatch({\n                  type: \"searchHotList\",\n                  payload: res.data,\n                });\n              });\n            }}\n            style={{ fontSize: \"24px\", marginRight: \"10px\", cursor: \"pointer\" }}\n          />\n          <input id=\"search\" type=\"text\" placeholder=\"검색어를 입력해주세요\" />\n          <div style={{ marginLeft: \"20px\" }}>\n            <select\n              id=\"tagSelect\"\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n              onChange={(e) => {\n                SetSelect(\n                  typeChanger(e.target.options[e.target.selectedIndex].text)\n                );\n              }}\n            >\n              <option defaultValue>검색항목</option>\n              <option value=\"1\">제목</option>\n              <option value=\"2\">내용</option>\n              <option value=\"3\">작성자</option>\n              <option value=\"4\">태그</option>\n            </select>\n          </div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n          }}\n        >\n          <Button\n            onClick={() => {\n              if (checkUser) {\n                navigate(\"/register\");\n              } else {\n                navigate(\"/login\");\n              }\n            }}\n          >\n            글등록\n          </Button>\n        </div>\n      </div>\n      <PaginatedItems itemsPerPage={6} />\n    </div>\n  );\n};\n\nexport default HotBoardMain;\n","/Users/sumin/Desktop/howmuch_front/src/components/Account.js",[],"/Users/sumin/Desktop/howmuch_front/src/components/LoginPage.js",[],"/Users/sumin/Desktop/howmuch_front/src/components/TestLogin.js",["93","94"],"import React from \"react\";\n\nconst TestLogin = () => {\n  return (\n    <div>\n      <div>\n        <form id=\"form\" method=\"post\" action=\"http://localhost:8181/login\">\n          <fieldset>\n            <div class=\"form-group\">\n              <input\n                id=\"ID\"\n                class=\"form-control\"\n                placeholder=\"ID\"\n                name=\"username\"\n                type=\"text\"\n                autofocus\n              />\n            </div>\n            <div class=\"form-group\">\n              <input\n                id=\"PW\"\n                class=\"form-control\"\n                placeholder=\"PW\"\n                name=\"password\"\n                type=\"password\"\n              />\n            </div>\n            <div class=\"checkbox\">\n              <label>\n                <input name=\"remember-me\" type=\"checkbox\" />\n                Remember Me\n              </label>\n            </div>\n            <button class=\"btn btn-lg btn-success btn-block\">Login</button>\n          </fieldset>\n          <input\n            type=\"hidden\"\n            name=\"${_csrf.parameterName }\"\n            value=\"${_csrf.token }\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TestLogin;\n","/Users/sumin/Desktop/howmuch_front/src/components/Modify.js",["95","96"],"import React, { useEffect, useState } from \"react\";\nimport { SiCashapp } from \"react-icons/si\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { RiFileUploadFill } from \"react-icons/ri\";\n\nconst Modify = () => {\n  let navigate = useNavigate();\n\n  // cookie\n\n  let csrf = new Cookies().get(\"XSRF-TOKEN\");\n  console.log(csrf);\n\n  // end cookie\n\n  let dispatch = useDispatch();\n\n  const readList = async () => {\n    await axios.get(\"http://localhost:3000/readList\").then((res) => {\n      console.log(\"success\");\n      console.log(res.data);\n\n      dispatch({\n        type: \"readList\",\n        payload: res.data,\n      });\n    });\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    readList();\n  }, []);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const [titleCheck, SettitleCheck] = useState(false);\n\n  const [contentCheck, SetcontentCheck] = useState(false);\n\n  const [suggestCheck, SetsuggestCheck] = useState(false);\n\n  const checkValue = (input) => {\n    console.log(input.value);\n\n    return input.value;\n  };\n\n  const resetShow = () => {\n    SettitleCheck(false);\n    SetcontentCheck(false);\n    SetsuggestCheck(false);\n  };\n\n  let { bno } = useParams();\n  console.log(bno);\n\n  let state = useSelector((state) => {\n    return state;\n  });\n\n  let boardState = state.boardReducer;\n\n  let findItemBoard =\n    boardState === \"\"\n      ? null\n      : boardState.find((item) => {\n          return item.bno === parseInt(bno);\n        });\n\n  console.log(findItemBoard);\n\n  let item = findItemBoard;\n\n  let currentWidth = document.documentElement.clientWidth;\n\n  // resize screen\n\n  let [flexdir, Setflexdir] = useState(\"row nowrap\");\n\n  useEffect(() => {\n    if (currentWidth > 1200) {\n      Setflexdir(\"row nowrap\");\n    }\n    if (currentWidth <= 1200) {\n      Setflexdir(\"column nowrap\");\n    }\n  }, [flexdir, currentWidth]);\n\n  window.addEventListener(\"resize\", () => {\n    let screenWidth = document.documentElement.clientWidth;\n\n    if (screenWidth <= 1200) {\n      Setflexdir(\"column nowrap\");\n    }\n\n    if (screenWidth > 1200) {\n      Setflexdir(\"row nowrap\");\n    }\n  });\n\n  ///end resize screen\n\n  // styled component\n  let TopTitle = styled(\"p\")`\n    font-size: 48px;\n  `;\n\n  let Label = styled(\"div\")`\n    font-size: 48px;\n    text-align: center;\n    display: inline-block;\n    width: 300px;\n  `;\n\n  let Warn = styled(\"p\")`\n    color: red;\n  `;\n\n  let Line = styled(\"div\")`\n    width: 80%;\n    height: 5px;\n    background-color: #2d4059;\n    margin: 0 auto;\n  `;\n  // end styled component\n\n  return (\n    <div>\n      <div className=\"cotainer-lg\">\n        <div\n          className=\"row d-flex justify-content-center\"\n          style={{ width: \"100%\", paddingTop: \"50px\" }}\n        >\n          <div\n            className=\"col-lg-1\"\n            onClick={() => {\n              navigate(\"/\");\n            }}\n            style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{ color: \"#EA5455\", fontSize: \"70px\", margin: \"0 20px\" }}\n            />\n          </div>\n          <div className=\"col-lg-9\">\n            <TopTitle>Check items & Feed back</TopTitle>\n          </div>\n        </div>\n      </div>\n      <Line></Line>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div\n            className=\"col d-flex flex-column justify-content-center align-items-center\"\n            style={{ paddingTop: \"80px\" }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>제목</Label>\n              <input\n                id=\"TITLE\"\n                type=\"text\"\n                placeholder=\"제목을 입력하세요\"\n                defaultValue={item == null ? null : item.title}\n                style={{\n                  width: \"400px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n            {titleCheck ? <Warn>제목을 입력해주세요.</Warn> : null}\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>\n                사진 첨부\n                <br />\n                (선택사항)\n              </Label>\n              <div\n                style={{\n                  width: \"450px\",\n                  height: \"400px\",\n                  fontSize: \"20px\",\n                  border: \"1px solid #666\",\n                  borderRadius: \"3px\",\n                  overflow: \"auto\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"inline-block\",\n                    padding: \"20px 0\",\n                    marginBottom: \"30px\",\n                    borderBottom: \"3px solid #EA5455\",\n                  }}\n                >\n                  <label for=\"ATTACH\">\n                    <RiFileUploadFill\n                      color=\"#EA5455\"\n                      size=\"35px\"\n                      cursor=\"pointer\"\n                    />\n                  </label>\n                  <span> 👈 원하는 이미지 또는 짤을 선택하세요!</span>\n                </div>\n                <input\n                  id=\"ATTACH\"\n                  type=\"file\"\n                  hidden=\"true\"\n                  multiple=\"multiple\"\n                  accept=\".jpg, .jpeg, .png, .svg+xml\"\n                  onChange={(e) => {\n                    console.log(\"change!\");\n\n                    let fileArr = [...e.target.files];\n\n                    // fileArr = [file(),file(),file()]\n\n                    let base64Arr = [];\n\n                    let base64Obj = {};\n\n                    fileArr.forEach((item, index) => {\n                      let reader = new FileReader();\n\n                      let imgBox = document.getElementById(\"imgBox\");\n                      let div = document.createElement(\"div\");\n                      let image = document.createElement(\"img\");\n                      let del = document.createElement(\"span\");\n\n                      div.style = \"display:flex;\";\n\n                      del.textContent = \"✘\";\n                      del.style =\n                        \"font-size: 30px; color: #EA5455; margin-left:10px; margin-top:-10px; cursor: pointer\";\n                      del.addEventListener(\"click\", (e) => {\n                        console.log(e.target.parentNode.parentNode);\n                        e.target.parentNode.parentNode.removeChild(div);\n                      });\n\n                      reader.onload = (e) => {\n                        let dataURL = reader.result;\n                        // console.log(typeof reader.result);\n                        base64Arr.push(dataURL);\n                        image.src = dataURL;\n                        image.style =\n                          \"width: 350px; display: block; margin-bottom: 20px\";\n\n                        imgBox.appendChild(div);\n                        div.appendChild(image);\n                        div.append(del);\n                      };\n\n                      reader.readAsDataURL(item);\n\n                      // console.log(base64Arr);\n                      // console.log(typeof base64Arr);\n                      // console.log(base64Arr[0]);\n                    });\n                  }}\n                  style={{ width: \"400px\", margin: \"20px 0\" }}\n                />\n                <div\n                  id=\"imgBox\"\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    flexFlow: \"column wrap\",\n                  }}\n                >\n                  {item === null\n                    ? null\n                    : item.imageList === null\n                    ? null\n                    : item.imageList.map((item, index) => {\n                        return (\n                          <div id={\"div\" + index} style={{ display: \"flex\" }}>\n                            <img\n                              src={item}\n                              alt=\"img\"\n                              style={{\n                                width: \"350px\",\n                                display: \"block\",\n                                marginBottom: \"20px\",\n                              }}\n                            />\n                            <span\n                              onClick={(e) => {\n                                let div = document.getElementById(\n                                  \"div\" + index\n                                );\n                                console.log(\n                                  e.currentTarget.parentNode.parentNode\n                                );\n                                e.currentTarget.parentNode.parentNode.removeChild(\n                                  div\n                                );\n                              }}\n                              style={{\n                                fontSize: \"30px\",\n                                color: \"#EA5455\",\n                                marginLeft: \"10px\",\n                                marginTop: \"-10px\",\n                                cursor: \"pointer\",\n                              }}\n                            >\n                              ✘\n                            </span>\n                          </div>\n                        );\n                      })}\n                </div>\n              </div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>내용</Label>\n              <textarea\n                id=\"CONTENT\"\n                placeholder=\"본문 내용을 입력하세요\"\n                defaultValue={item == null ? null : item.content}\n                style={{\n                  width: \"450px\",\n                  height: \"400px\",\n                  fontSize: \"20px\",\n                  marginBottom: \"10px\",\n                }}\n              />\n            </div>\n            {contentCheck ? <Warn>내용을 입력해주세요.</Warn> : null}\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>\n                제시가\n                <br />\n                (선택사항)\n              </Label>\n              <input\n                id=\"SUGGESTION\"\n                type=\"text\"\n                placeholder=\"제시할 가격을 입력하세요 (생략가능)\"\n                defaultValue={\n                  item == null ? null : item.suggestion ? item.suggestion : null\n                }\n                style={{\n                  width: \"400px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n            {suggestCheck ? (\n              <Warn style={{ marginLeft: \"-80px\" }}>\n                숫자만 입력이 가능합니다.\n              </Warn>\n            ) : null}\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>\n                태그 (최대3개)\n                <br />\n                (선택사항)\n              </Label>\n              <input\n                id=\"TAG1\"\n                type=\"text\"\n                placeholder=\"태그 입력란\"\n                defaultValue={\n                  item == null\n                    ? null\n                    : item.tagList[0] === \"not\" || !item.tagList[0]\n                    ? null\n                    : item.tagList[0]\n                }\n                style={{\n                  width: \"150px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n              <input\n                id=\"TAG2\"\n                type=\"text\"\n                placeholder=\"태그 입력란\"\n                defaultValue={\n                  item == null ? null : item.tagList[1] ? item.tagList[1] : null\n                }\n                style={{\n                  width: \"150px\",\n                  height: \"50px\",\n                  margin: \"20px\",\n                  fontSize: \"20px\",\n                }}\n              />\n              <input\n                id=\"TAG3\"\n                type=\"text\"\n                placeholder=\"태그 입력란\"\n                defaultValue={\n                  item == null ? null : item.tagList[2] ? item.tagList[2] : null\n                }\n                style={{\n                  width: \"150px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n            <div\n              style={{\n                paddingTop: \"60px\",\n                paddingRight: \"20px\",\n                display: \"flex\",\n                width: \"300px\",\n                justifyContent: \"space-evenly\",\n                paddingBottom: \"50px\",\n              }}\n            >\n              <Button\n                onClick={async () => {\n                  let thumbnailURL = \"\";\n                  let postImgURL = [];\n\n                  let attachImgBox = document.querySelectorAll(\"#imgBox img\");\n\n                  if (attachImgBox.length > 0) {\n                    let arrAttachImgBox = [...attachImgBox];\n\n                    let thumbnailImgTag = attachImgBox[0];\n\n                    console.log(attachImgBox);\n\n                    thumbnailURL = thumbnailImgTag.src;\n\n                    console.log(thumbnailURL);\n\n                    postImgURL = arrAttachImgBox.map((item, index) => {\n                      return item.src;\n                    });\n\n                    console.log(postImgURL);\n                  }\n\n                  resetShow();\n\n                  let titleInput = document.getElementById(\"TITLE\");\n                  let contentInput = document.getElementById(\"CONTENT\");\n                  let suggestInput = document.getElementById(\"SUGGESTION\");\n                  let tag1Input = document.getElementById(\"TAG1\");\n                  let tag2Input = document.getElementById(\"TAG2\");\n                  let tag3Input = document.getElementById(\"TAG3\");\n\n                  let tagArr = [];\n\n                  if (tag1Input.value) {\n                    tagArr.push(tag1Input.value);\n                  }\n                  if (tag2Input.value) {\n                    tagArr.push(tag2Input.value);\n                  }\n                  if (tag3Input.value) {\n                    tagArr.push(tag3Input.value);\n                  }\n\n                  console.log(tagArr);\n\n                  // console.log(titleInput);\n\n                  let number = /[0-9]/; // 숫자 체크\n\n                  if (!checkValue(titleInput)) {\n                    SettitleCheck(true);\n                    return;\n                  }\n                  if (!checkValue(contentInput)) {\n                    SetcontentCheck(true);\n                    return;\n                  }\n\n                  if (checkValue(suggestInput)) {\n                    if (!number.test(suggestInput.value)) {\n                      SetsuggestCheck(true);\n                      suggestInput.value = \"\";\n                      return;\n                    }\n                  }\n\n                  await axios({\n                    url: \"/update\",\n                    method: \"post\",\n                    data: {\n                      bno: bno,\n                      title: titleInput.value,\n                      content: contentInput.value,\n                      imageList: postImgURL.length > 0 ? postImgURL : null,\n                      tagList: tagArr.length > 0 ? tagArr : null,\n                      suggestion: suggestInput.value\n                        ? suggestInput.value\n                        : null,\n                    },\n                    headers: {\n                      \"XSRF-TOKEN\": csrf,\n                    },\n                  }).then((res) => {\n                    console.log(res.data);\n                  });\n\n                  handleShow();\n                }}\n                style={{\n                  backgroundColor: \"#2d4059\",\n                  border: \"none\",\n                  fontSize: \"24px\",\n                }}\n              >\n                수정하기\n              </Button>\n              <Button\n                onClick={() => {\n                  navigate(-1);\n                }}\n                style={{\n                  backgroundColor: \"#2d4059\",\n                  border: \"none\",\n                  fontSize: \"24px\",\n                }}\n              >\n                취소\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* modal */}\n      <Modal\n        show={show}\n        onHide={handleClose}\n        style={{ fontFamily: \"'Do Hyeon', sans-serif\" }}\n      >\n        <Modal.Header>\n          <Modal.Title>글이 정상 수정되었습니다.</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>게시판페이지에서 수정된 게시물을 확인해보세요.</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              navigate(\"/boardmain\");\n            }}\n          >\n            닫기\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Modify;\n","/Users/sumin/Desktop/howmuch_front/src/components/Welcome.js",[],"/Users/sumin/Desktop/howmuch_front/src/components/Register.js",["97","98"],"import React, { useEffect, useState } from \"react\";\nimport { SiCashapp } from \"react-icons/si\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { RiFileUploadFill } from \"react-icons/ri\";\n\nconst Register = () => {\n  let navigate = useNavigate();\n\n  // cookie\n\n  let csrf = new Cookies().get(\"XSRF-TOKEN\");\n  console.log(csrf);\n\n  // end cookie\n\n  let dispatch = useDispatch();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const [titleCheck, SettitleCheck] = useState(false);\n\n  const [contentCheck, SetcontentCheck] = useState(false);\n\n  const [suggestCheck, SetsuggestCheck] = useState(false);\n\n  const checkValue = (input) => {\n    console.log(input.value);\n\n    return input.value;\n  };\n\n  const resetShow = () => {\n    SettitleCheck(false);\n    SetcontentCheck(false);\n    SetsuggestCheck(false);\n  };\n\n  let currentWidth = document.documentElement.clientWidth;\n\n  // resize screen\n\n  let [flexdir, Setflexdir] = useState(\"row nowrap\");\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    if (currentWidth > 1200) {\n      Setflexdir(\"row nowrap\");\n    }\n    if (currentWidth <= 1200) {\n      Setflexdir(\"column nowrap\");\n    }\n  }, [flexdir, currentWidth]);\n\n  window.addEventListener(\"resize\", () => {\n    let screenWidth = document.documentElement.clientWidth;\n\n    if (screenWidth <= 1200) {\n      Setflexdir(\"column nowrap\");\n    }\n\n    if (screenWidth > 1200) {\n      Setflexdir(\"row nowrap\");\n    }\n  });\n\n  ///end resize screen\n\n  // styled component\n  let TopTitle = styled(\"p\")`\n    font-size: 48px;\n  `;\n\n  let Label = styled(\"div\")`\n    font-size: 48px;\n    text-align: center;\n    display: inline-block;\n    width: 300px;\n  `;\n\n  let Warn = styled(\"p\")`\n    color: red;\n  `;\n\n  let Line = styled(\"div\")`\n    width: 80%;\n    height: 5px;\n    background-color: #2d4059;\n    margin: 0 auto;\n  `;\n  // end styled component\n\n  return (\n    <div>\n      <div className=\"cotainer-lg\">\n        <div\n          className=\"row d-flex justify-content-center\"\n          style={{ width: \"100%\", paddingTop: \"50px\" }}\n        >\n          <div\n            className=\"col-lg-1\"\n            onClick={() => {\n              navigate(\"/\");\n            }}\n            style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{ color: \"#EA5455\", fontSize: \"70px\", margin: \"0 20px\" }}\n            />\n          </div>\n          <div className=\"col-lg-9\">\n            <TopTitle>Check items & Feed back</TopTitle>\n          </div>\n        </div>\n      </div>\n      <Line></Line>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div\n            className=\"col d-flex flex-column justify-content-center align-items-center\"\n            style={{ paddingTop: \"80px\" }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>제목</Label>\n              <input\n                id=\"TITLE\"\n                type=\"text\"\n                placeholder=\"제목을 입력하세요\"\n                style={{\n                  width: \"400px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n            {titleCheck ? <Warn>제목을 입력해주세요.</Warn> : null}\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>\n                사진 첨부\n                <br />\n                (선택사항)\n              </Label>\n              <div\n                style={{\n                  width: \"450px\",\n                  height: \"400px\",\n                  fontSize: \"20px\",\n                  border: \"1px solid #666\",\n                  borderRadius: \"3px\",\n                  overflow: \"auto\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"inline-block\",\n                    padding: \"20px 0\",\n                    marginBottom: \"30px\",\n                    borderBottom: \"3px solid #EA5455\",\n                  }}\n                >\n                  <label for=\"ATTACH\">\n                    <RiFileUploadFill\n                      color=\"#EA5455\"\n                      size=\"35px\"\n                      cursor=\"pointer\"\n                    />\n                  </label>\n                  <span> 👈 원하는 이미지 또는 짤을 선택하세요!</span>\n                </div>\n                <input\n                  id=\"ATTACH\"\n                  hidden=\"true\"\n                  type=\"file\"\n                  multiple=\"multiple\"\n                  accept=\".jpg, .jpeg, .png, .svg+xml, .gif\"\n                  onChange={(e) => {\n                    console.log(\"change!\");\n\n                    let fileArr = [...e.target.files];\n\n                    // fileArr = [file(),file(),file()]\n\n                    let base64Arr = [];\n\n                    let base64Obj = {};\n\n                    fileArr.forEach((item, index) => {\n                      let reader = new FileReader();\n\n                      let imgBox = document.getElementById(\"imgBox\");\n                      let div = document.createElement(\"div\");\n                      let image = document.createElement(\"img\");\n                      let del = document.createElement(\"span\");\n\n                      div.style = \"display:flex;\";\n\n                      del.textContent = \"✘\";\n                      del.style =\n                        \"font-size: 30px; color: #EA5455; margin-left:10px; margin-top:-10px; cursor: pointer\";\n                      del.addEventListener(\"click\", (e) => {\n                        console.log(e.target.parentNode.parentNode);\n                        e.target.parentNode.parentNode.removeChild(div);\n                      });\n\n                      reader.onload = (e) => {\n                        let dataURL = reader.result;\n                        // console.log(typeof reader.result);\n                        base64Arr.push(dataURL);\n                        image.src = dataURL;\n                        image.style =\n                          \"width: 350px; display: block; margin-bottom: 20px\";\n\n                        imgBox.appendChild(div);\n                        div.appendChild(image);\n                        div.append(del);\n                      };\n\n                      reader.readAsDataURL(item);\n\n                      // console.log(base64Arr);\n                      // console.log(typeof base64Arr);\n                      // console.log(base64Arr[0]);\n                    });\n                  }}\n                  style={{ width: \"400px\", margin: \"20px 0\" }}\n                />\n                <div\n                  id=\"imgBox\"\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    flexFlow: \"column wrap\",\n                  }}\n                ></div>\n              </div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                alignItems: \"center\",\n                paddingTop: \"30px\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>내용</Label>\n              <textarea\n                id=\"CONTENT\"\n                placeholder=\"본문 내용을 입력하세요\"\n                style={{\n                  width: \"450px\",\n                  height: \"400px\",\n                  fontSize: \"20px\",\n                  marginBottom: \"10px\",\n                  resize: \"none\",\n                }}\n              />\n            </div>\n            {contentCheck ? <Warn>내용을 입력해주세요.</Warn> : null}\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>\n                제시가\n                <br />\n                (선택사항)\n              </Label>\n              <input\n                id=\"SUGGESTION\"\n                type=\"text\"\n                placeholder=\"제시할 가격을 입력하세요 (생략가능)\"\n                style={{\n                  width: \"400px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n            {suggestCheck ? (\n              <Warn style={{ marginLeft: \"-80px\" }}>\n                숫자만 입력이 가능합니다.\n              </Warn>\n            ) : null}\n            <div\n              style={{\n                display: \"flex\",\n                width: \"80%\",\n                paddingTop: \"30px\",\n                alignItems: \"center\",\n                flexFlow: flexdir,\n              }}\n            >\n              <Label>\n                태그 (최대3개)\n                <br />\n                (선택사항)\n              </Label>\n              <input\n                id=\"TAG1\"\n                type=\"text\"\n                placeholder=\"태그 입력란\"\n                style={{\n                  width: \"150px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n              <input\n                id=\"TAG2\"\n                type=\"text\"\n                placeholder=\"태그 입력란\"\n                style={{\n                  width: \"150px\",\n                  height: \"50px\",\n                  margin: \"20px 20px\",\n                  fontSize: \"20px\",\n                }}\n              />\n              <input\n                id=\"TAG3\"\n                type=\"text\"\n                placeholder=\"태그 입력란\"\n                style={{\n                  width: \"150px\",\n                  height: \"50px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n            <div\n              style={{\n                paddingTop: \"60px\",\n                paddingRight: \"20px\",\n                display: \"flex\",\n                width: \"300px\",\n                justifyContent: \"space-evenly\",\n                paddingBottom: \"50px\",\n              }}\n            >\n              <Button\n                onClick={async () => {\n                  let thumbnailURL = \"\";\n                  let postImgURL = [];\n\n                  let attachImgBox = document.querySelectorAll(\"#imgBox img\");\n\n                  if (attachImgBox.length > 0) {\n                    let arrAttachImgBox = [...attachImgBox];\n\n                    let thumbnailImgTag = attachImgBox[0];\n\n                    console.log(attachImgBox);\n\n                    thumbnailURL = thumbnailImgTag.src;\n\n                    console.log(thumbnailURL);\n\n                    postImgURL = arrAttachImgBox.map((item, index) => {\n                      return item.src;\n                    });\n\n                    console.log(postImgURL);\n                  }\n\n                  resetShow();\n\n                  let titleInput = document.getElementById(\"TITLE\");\n                  let contentInput = document.getElementById(\"CONTENT\");\n                  let suggestInput = document.getElementById(\"SUGGESTION\");\n                  let tag1Input = document.getElementById(\"TAG1\");\n                  let tag2Input = document.getElementById(\"TAG2\");\n                  let tag3Input = document.getElementById(\"TAG3\");\n\n                  let tagArr = [];\n\n                  if (tag1Input.value) {\n                    tagArr.push(tag1Input.value);\n                  }\n                  if (tag2Input.value) {\n                    tagArr.push(tag2Input.value);\n                  }\n                  if (tag3Input.value) {\n                    tagArr.push(tag3Input.value);\n                  }\n\n                  console.log(tagArr);\n\n                  // console.log(titleInput);\n\n                  let number = /[0-9]/; // 숫자 체크\n\n                  if (!checkValue(titleInput)) {\n                    SettitleCheck(true);\n                    return;\n                  }\n                  if (!checkValue(contentInput)) {\n                    SetcontentCheck(true);\n                    return;\n                  }\n\n                  if (checkValue(suggestInput)) {\n                    if (!number.test(suggestInput.value)) {\n                      SetsuggestCheck(true);\n                      suggestInput.value = \"\";\n                      return;\n                    }\n                  }\n\n                  await axios({\n                    url: \"/register\",\n                    method: \"post\",\n                    data: {\n                      title: titleInput.value,\n                      content: contentInput.value,\n                      imageList: postImgURL.length > 0 ? postImgURL : null,\n                      tagList: tagArr.length > 0 ? tagArr : [\"not\"],\n                      suggestion: suggestInput.value\n                        ? suggestInput.value\n                        : null,\n                    },\n                    headers: {\n                      \"XSRF-TOKEN\": csrf,\n                    },\n                  }).then((res) => {\n                    console.log(res.data);\n                  });\n\n                  handleShow();\n                }}\n                style={{\n                  backgroundColor: \"#2d4059\",\n                  border: \"none\",\n                  fontSize: \"24px\",\n                }}\n              >\n                등록하기\n              </Button>\n              <Button\n                onClick={() => {\n                  navigate(\"/boardmain\");\n                }}\n                style={{\n                  backgroundColor: \"#2d4059\",\n                  border: \"none\",\n                  fontSize: \"24px\",\n                }}\n              >\n                취소\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* modal */}\n      <Modal\n        show={show}\n        onHide={handleClose}\n        style={{ fontFamily: \"'Do Hyeon', sans-serif\" }}\n      >\n        <Modal.Header>\n          <Modal.Title>글이 정상 등록되었습니다.</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>게시판페이지에서 등록한 게시물을 확인해보세요.</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              navigate(\"/boardmain\");\n            }}\n          >\n            게시판으로 이동\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Register;\n","/Users/sumin/Desktop/howmuch_front/src/components/DetailBoard.js",["99"],"import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { SiCashapp } from \"react-icons/si\";\nimport styled from \"styled-components\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport noImage from \"../img/noImage.svg\";\nimport { BsFillCaretRightFill, BsPinFill } from \"react-icons/bs\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport { GrView } from \"react-icons/gr\";\nimport { AiFillLike, AiFillDislike } from \"react-icons/ai\";\nimport ReplyPagination from \"./ReplyPagination\";\nimport BoardListPagination from \"./BoardListPagination\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { RiVipCrownFill } from \"react-icons/ri\";\nimport \"../css/DetailBoard.css\";\n\nconst DetailBoard = (props) => {\n  let navigate = useNavigate();\n\n  let dispatch = useDispatch();\n\n  // cookie\n\n  let csrf = new Cookies().get(\"XSRF-TOKEN\");\n  console.log(csrf);\n\n  // end cookie\n\n  const readList = async () => {\n    await axios.get(\"http://localhost:3000/readList\").then((res) => {\n      console.log(\"success\");\n      console.log(res.data);\n      dispatch({\n        type: \"readList\",\n        payload: res.data,\n      });\n    });\n  };\n\n  let API_URL = \"http://localhost:3000\";\n\n  const getMyInfo = async () => {\n    await axios\n      .get(API_URL + \"/userinfo\")\n      .then((result) => {\n        console.log(result.data);\n        SetInfo(result.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  let [userInfo, SetInfo] = useState(\"\");\n\n  const readReplyList = async () => {\n    await axios({\n      url: \"http://localhost:8181/ReadReplyList\",\n      params: {\n        bno: bno,\n      },\n    }).then((res) => {\n      console.log(res.data);\n      dispatch({\n        type: \"readReply\",\n        payload: res.data,\n      });\n    });\n  };\n\n  const readValueList = async () => {\n    await axios({\n      url: \"http://localhost:8181/log\",\n      params: {\n        bno: bno,\n      },\n    }).then((res) => {\n      console.log(\"success valuelog\");\n      console.log(res.data);\n      dispatch({\n        type: \"valuelog\",\n        payload: res.data,\n      });\n    });\n  };\n\n  const readCalculateValue = async () => {\n    await axios({\n      url: \"http://localhost:8181/cal\",\n      params: {\n        bno: bno,\n      },\n    }).then((res) => {\n      console.log(\"success cal\");\n      console.log(res.data);\n      SetcalculateValue(res.data);\n    });\n  };\n\n  const upreadCount = async () => {\n    await axios({\n      url: \"http://localhost:8181/rcount\",\n      params: {\n        bno: bno,\n      },\n    }).then(async (res) => {\n      console.log(\"success rcount\");\n\n      await readList();\n    });\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    resetBoolean();\n    readList();\n    getMyInfo();\n    readReplyList();\n    readValueList();\n    readCalculateValue();\n    upreadCount();\n  }, []);\n\n  let { bno } = useParams();\n  console.log(bno);\n\n  let state = useSelector((state) => {\n    return state;\n  });\n\n  let boardState = state.boardReducer;\n\n  let findItemBoard =\n    boardState === \"\"\n      ? null\n      : boardState.find((item) => {\n          return item.bno === parseInt(bno);\n        });\n\n  console.log(findItemBoard);\n\n  let item = findItemBoard;\n\n  let valueState = state.valueReducer;\n\n  let [calculateValue, SetcalculateValue] = useState(\"\");\n\n  // tier reader\n  const tierSelect = (point) => {\n    if (point < 250) {\n      // SetTier(\"Bronze\");\n      return \"Bronze\";\n    } else if (point < 500) {\n      // SetTier(\"Silver\");\n      return \"Silver\";\n    } else if (point < 750) {\n      // SetTier(\"Gold\");\n      return \"Gold\";\n    } else if (point < 1000) {\n      // SetTier(\"Platinum\");\n      return \"Platinum\";\n    } else {\n      // SetTier(\"Diamond\");\n      return \"Diamond\";\n    }\n  };\n\n  const tierObject = [\n    { tier: \"Diamond\", color: \"#548CFF\" },\n    { tier: \"Platinum\", color: \"#00BDAA\" },\n    { tier: \"Gold\", color: \"#FFE300\" },\n    { tier: \"Silver\", color: \"#C8C2BC\" },\n    { tier: \"Bronze\", color: \"#E26A2C\" },\n  ];\n\n  const findTier = (userTier) => {\n    console.log(userTier);\n\n    let findItem = tierObject.find((item) => {\n      return item.tier === userTier;\n    });\n\n    console.log(findItem);\n    console.log(findItem.color);\n\n    return findItem.color;\n  };\n\n  // findTier(tierSelect(포인트 데이터))\n\n  // tier reader end\n\n  // modal control\n\n  const resetBoolean = () => {};\n\n  const [warnvalueshow, setwarnvalueShow] = useState(false);\n\n  const handleWarnClose = () => setwarnvalueShow(false);\n  const handleWarnShow = () => setwarnvalueShow(true);\n\n  const [loginShow, setloginShow] = useState(false);\n\n  const handleLoginClose = () => setloginShow(false);\n  const handleLoginShow = () => setloginShow(true);\n\n  const [warn, Setwarn] = useState(false);\n  const [warnDuplication, SetwarnDuplication] = useState(false);\n  const [warnSelfValue, SetwarnSelfValue] = useState(false);\n  const [warnMinus, SetwarnMinus] = useState(false);\n  // modal control end\n\n  // resize screen\n\n  let currentWidth = document.documentElement.clientWidth;\n\n  let [flexdir, Setflexdir] = useState(\"row wrap\");\n\n  useEffect(() => {\n    if (currentWidth > 990) {\n      Setflexdir(\"row wrap\");\n    }\n    if (currentWidth <= 990) {\n      Setflexdir(\"column wrap\");\n    }\n  }, [flexdir, currentWidth]);\n\n  window.addEventListener(\"resize\", () => {\n    let screenWidth = document.documentElement.clientWidth;\n\n    if (screenWidth <= 990) {\n      Setflexdir(\"column wrap\");\n    }\n\n    if (screenWidth > 990) {\n      Setflexdir(\"row wrap\");\n    }\n  });\n\n  ///end resize screen\n\n  // styled component\n  let TopTitle = styled(\"p\")`\n    font-size: 48px;\n  `;\n\n  let Line = styled(\"div\")`\n    width: 80%;\n    height: 5px;\n    background-color: #2d4059;\n    margin: 0 auto;\n  `;\n\n  let Warn = styled(\"p\")`\n    color: red;\n  `;\n  // end styled component\n  return (\n    <div>\n      <div className=\"cotainer-lg\">\n        <div\n          className=\"row d-flex justify-content-center\"\n          style={{ width: \"100%\", paddingTop: \"50px\" }}\n        >\n          <div\n            className=\"col-lg-1\"\n            onClick={() => {\n              navigate(\"/\");\n            }}\n            style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\n          >\n            <SiCashapp\n              style={{ color: \"#EA5455\", fontSize: \"70px\", margin: \"0 20px\" }}\n            />\n          </div>\n          <div className=\"col-lg-9\">\n            <TopTitle>Wait you feed back !!</TopTitle>\n          </div>\n        </div>\n      </div>\n      <Line></Line>\n      <div className=\"container-lg\" style={{ marginTop: \"30px\" }}>\n        <div className=\"row d-flex justify-content-end\">\n          <div\n            className=\"col-4 d-flex justify-content-evenly\"\n            style={{ flexFlow: flexdir }}\n          >\n            <Button\n              style={{\n                marginBottom: \"10px\",\n                backgroundColor: \"#2D4059\",\n                borderStyle: \"none\",\n              }}\n              onClick={() => {\n                navigate(\"/boardmain/\");\n              }}\n            >\n              글목록\n            </Button>\n            {valueState === \"\" ? null : valueState.length > 0 ? null : !(\n                userInfo && item\n              ) ? null : !(userInfo.nick === item.writer) ? null : (\n              <Button\n                style={{\n                  marginBottom: \"10px\",\n                  backgroundColor: \"#2D4059\",\n                  borderStyle: \"none\",\n                }}\n                onClick={() => {\n                  navigate(\"/modify/\" + item.bno);\n                  console.log(item);\n                }}\n              >\n                글수정\n              </Button>\n            )}\n            {!(userInfo && item) ? null : !(\n                userInfo.nick === item.writer\n              ) ? null : (\n              <Button\n                onClick={async () => {\n                  await axios({\n                    url: \"/delete\",\n                    method: \"delete\",\n                    params: {\n                      bno: item.bno,\n                      writer: item.writer,\n                    },\n                  })\n                    .then((res) => {\n                      navigate(\"/boardmain\");\n                      console.log(res.data);\n                      dispatch({\n                        type: \"deleteBoard\",\n                        payload: res.data,\n                      });\n                    })\n                    .catch((err) => {\n                      console.log(err);\n                      navigate(\"/login\");\n                    });\n                }}\n                style={{\n                  marginBottom: \"10px\",\n                  backgroundColor: \"#F07B3F\",\n                  borderStyle: \"none\",\n                }}\n              >\n                글삭제\n              </Button>\n            )}\n            {item == null ? null : item.end === 1 ? null : !(\n                userInfo && item\n              ) ? null : !(userInfo.nick === item.writer) ? null : (\n              <Button\n                style={{\n                  marginBottom: \"10px\",\n                  backgroundColor: \"#EA5455\",\n                  borderStyle: \"none\",\n                }}\n                onClick={async () => {\n                  await axios({\n                    url: \"/setPoint\",\n                    method: \"get\",\n                    params: {\n                      bno: item.bno,\n                      mno: userInfo.mno,\n                    },\n                  }).then((res) => {\n                    console.log(res.data);\n                    console.log(\"value end!!!\");\n                    readList();\n                    SetcalculateValue(res.data);\n                  });\n\n                  navigate(\"/detail/\" + item.bno);\n                }}\n              >\n                평가종료\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n      {/* detail card */}\n      <div\n        className=\"container-lg d-flex justify-content-center\"\n        style={{ marginTop: \"50px\" }}\n      >\n        <Card style={{ width: \"800px\", color: \"white\", padding: \"10px\" }}>\n          {item === null ? null : item.imageList === null ? (\n            <Card.Img\n              variant=\"top\"\n              src={noImage}\n              style={{ border: \"2px solid #2D4059\" }}\n            />\n          ) : (\n            item.imageList.map((item, index) => {\n              return (\n                <Card.Img\n                  variant=\"top\"\n                  src={item}\n                  key={index}\n                  style={{ border: \"2px solid #2D4059\", marginBottom: \"10px\" }}\n                />\n              );\n            })\n          )}\n          <Card.Body style={{ padding: \"1rem 0\" }}>\n            <div style={{ display: \"flex\" }}>\n              <Card.Title\n                style={{\n                  MaxWidth: \"700px\",\n                  height: \"40px\",\n                  textAlign: \"left\",\n                  backgroundColor: \"#2D4059\",\n                  borderRadius: \"5px\",\n                  padding: \"10px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                }}\n              >\n                {item == null ? null : item.title}\n              </Card.Title>\n            </div>\n            <div style={{ display: \"flex\" }}>\n              <p\n                style={{\n                  maxWidth: \"700px\",\n                  height: \"40px\",\n                  backgroundColor: \"#2D4059\",\n                  borderRadius: \"5px\",\n                  padding: \"10px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                }}\n              >\n                {item == null ? null : (\n                  <span>\n                    <RiVipCrownFill color={findTier(tierSelect(item.point))} />{\" \"}\n                    {item.writer}\n                  </span>\n                )}\n              </p>\n            </div>\n\n            <Card.Text\n              style={{\n                backgroundColor: \"#2D4059\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n              }}\n            >\n              {item == null ? null : item.content}\n            </Card.Text>\n            <div style={{ marginTop: \"30px\", textAlign: \"center\" }}>\n              {item == null\n                ? null\n                : item.tag === \"not\"\n                ? null\n                : item.tagList.map((item, index) => {\n                    return (\n                      <span\n                        style={{\n                          display: \"inline-block\",\n                          maxWidth: \"700px\",\n                          height: \"40px\",\n                          backgroundColor: \"#2D4059\",\n                          borderRadius: \"5px\",\n                          padding: \"10px\",\n                          marginBottom: \"0\",\n                          marginRight: \"10px\",\n                          textOverflow: \"ellipsis\",\n                          overflow: \"hidden\",\n                          whiteSpace: \"nowrap\",\n                        }}\n                        key={index}\n                      >\n                        #{item}\n                      </span>\n                    );\n                  })}\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n      {/* end detail card */}\n\n      {/* start price */}\n      <div className=\"container-lg\">\n        <div className=\"row\">\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginTop: \"150px\",\n            }}\n          >\n            <p\n              style={{\n                width: \"100px\",\n                height: \"50px\",\n                backgroundColor: \"#F07B3F\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n                marginTop: \"17px\",\n                fontSize: \"24px\",\n              }}\n            >\n              제시가\n            </p>\n            <BsFillCaretRightFill\n              style={{ color: \"#2D4059\", fontSize: \"32px\" }}\n            />\n            <div\n              style={{\n                color: \"black\",\n                width: \"400px\",\n                fontSize: \"24px\",\n                borderBottom: \"2px solid #2D4059\",\n              }}\n            >\n              {item == null\n                ? null\n                : item.suggestion\n                ? item.suggestion + \" 원\"\n                : \"없음\"}\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginTop: \"50px\",\n            }}\n          >\n            <p\n              style={{\n                width: \"100px\",\n                height: \"50px\",\n                backgroundColor: \"#FFD460\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n                marginTop: \"17px\",\n                fontSize: \"24px\",\n              }}\n            >\n              최저가\n            </p>\n            <BsFillCaretRightFill\n              style={{ color: \"#2D4059\", fontSize: \"32px\" }}\n            />\n            <div\n              style={{\n                color: \"black\",\n                width: \"400px\",\n                fontSize: \"24px\",\n                borderBottom: \"2px solid #2D4059\",\n              }}\n            >\n              {!calculateValue.min ? \"없음\" : calculateValue.min + \" 원\"}\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginTop: \"50px\",\n            }}\n          >\n            <p\n              style={{\n                width: \"100px\",\n                height: \"50px\",\n                backgroundColor: \"#EA5455\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n                marginTop: \"17px\",\n                fontSize: \"24px\",\n              }}\n            >\n              최고가\n            </p>\n            <BsFillCaretRightFill\n              style={{ color: \"#2D4059\", fontSize: \"32px\" }}\n            />\n            <div\n              style={{\n                color: \"black\",\n                width: \"400px\",\n                fontSize: \"24px\",\n                borderBottom: \"2px solid #2D4059\",\n              }}\n            >\n              {!calculateValue.max ? \"없음\" : calculateValue.max + \" 원\"}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* end price */}\n\n      {/* start value log */}\n      <div\n        className=\"container-lg d-flex justify-content-center\"\n        style={{ marginTop: \"50px\" }}\n      >\n        <div style={{ width: \"800px\", marginTop: \"30px\", textAlign: \"left\" }}>\n          <p style={{ fontSize: \"24px\", borderBottom: \"2px solid #2D4059\" }}>\n            <span>평가로그</span>\n          </p>\n          {valueState === \"\" ? (\n            <span>아직 평가가 이루어 지지 않았습니다.</span>\n          ) : valueState.length <= 0 ? (\n            <span>아직 평가가 이루어 지지 않았습니다.</span>\n          ) : (\n            valueState.map((item, index) => {\n              return (\n                <span\n                  style={{\n                    display: \"inline-block\",\n                    maxWidth: \"700px\",\n                    height: \"40px\",\n                    backgroundColor: \"#EA5455\",\n                    borderRadius: \"5px\",\n                    padding: \"10px\",\n                    marginBottom: \"0\",\n                    marginRight: \"10px\",\n                    overflow: \"hidden\",\n                  }}\n                  key={index}\n                >\n                  {\n                    <span>\n                      <RiVipCrownFill\n                        color={findTier(tierSelect(item.point))}\n                      />{\" \"}\n                      {item.rater}\n                    </span>\n                  }{\" \"}\n                  님 {item.price} 원{\" \"}\n                  {String(\n                    new Date(+new Date(item.vdate) + 3240 * 10000)\n                      .toISOString()\n                      .replace(\"T\", \" \")\n                      .replace(/\\..*/, \"\")\n                  )}\n                </span>\n              );\n            })\n          )}\n        </div>\n      </div>\n      {/* end value log */}\n\n      {/* start value input */}\n      <div\n        className=\"container-lg d-flex justify-content-center\"\n        style={{ marginTop: \"100px\" }}\n      >\n        <div\n          style={{\n            width: \"75%\",\n            height: \"500px\",\n            backgroundColor: \"#FFD460\",\n            display: \"flex\",\n            flexFlow: \"column wrap\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n            borderRadius: \"7px\",\n          }}\n        >\n          {item == null ? null : item.end === 0 ? (\n            <div\n              style={{\n                width: \"80%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <FaDollarSign style={{ fontSize: \"32px\", color: \"#EA5455\" }} />\n              <div\n                style={{\n                  color: \"black\",\n                  width: \"400px\",\n                  fontSize: \"24px\",\n                  borderBottom: \"2px solid #EA5455\",\n                }}\n              >\n                {!calculateValue.avg\n                  ? \"없음\"\n                  : \"평균가: \" + calculateValue.avg + \" 원\"}\n              </div>\n              <span style={{ fontSize: \"32px\" }}>원</span>\n            </div>\n          ) : null}\n          {item == null ? null : item.end === 0 ? (\n            <div style={{ fontSize: \"24px\" }}>\n              {!userInfo.nick ? \"익명\" : userInfo.nick} 님의 <br />\n              평가금액은 ... ?\n            </div>\n          ) : (\n            <div style={{ fontSize: \"24px\" }}>\n              평가가 완료된 게시물입니다.\n              <br />\n              <span style={{ color: \"#EA5455\" }}>최종평가금액은 .. ?</span>\n            </div>\n          )}\n          {item == null ? null : item.end === 0 ? (\n            <div style={{ width: \"80%\" }}>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <BsPinFill style={{ fontSize: \"32px\", color: \"#EA5455\" }} />\n                <div\n                  style={{ borderBottom: \"2px solid #EA5455\", width: \"60%\" }}\n                >\n                  <input\n                    id=\"price\"\n                    style={{\n                      color: \"black\",\n                      width: \"70%\",\n                      fontSize: \"24px\",\n                      borderStyle: \"none\",\n                      backgroundColor: \"transparent\",\n                      textAlign: \"center\",\n                    }}\n                  />\n                </div>\n                <span style={{ fontSize: \"32px\" }}>원</span>\n              </div>\n              {warn ? (\n                <Warn>\n                  값을 입력하지 않았거나 입력한 값이 숫자가 아닙니다. 다시\n                  입력해주세요.\n                </Warn>\n              ) : null}\n              {warnMinus ? (\n                <Warn>음수의 값은 입력하실 수 없습니다!</Warn>\n              ) : null}\n              {warnDuplication ? (\n                <Warn>\n                  이미 평가한 게시물입니다. 다른 게시물을 평가해보세요!\n                </Warn>\n              ) : null}\n              {warnSelfValue ? (\n                <Warn>자신의 게시물에는 평가할 수 없습니다!</Warn>\n              ) : null}\n              <Button\n                onClick={async () => {\n                  let number = /[0-9]/; // 숫자 체크\n                  let price = document.getElementById(\"price\");\n\n                  Setwarn(false);\n                  SetwarnMinus(false);\n\n                  if (!price.value || !number.test(price.value)) {\n                    console.log(\"no value\");\n                    Setwarn(true);\n                    return;\n                  } else {\n                    Setwarn(false);\n                  }\n\n                  if (parseInt(price.value) < 0) {\n                    SetwarnMinus(true);\n                    return;\n                  } else {\n                    SetwarnMinus(false);\n                  }\n\n                  if (!userInfo) {\n                    handleLoginShow();\n                    return;\n                  }\n\n                  handleWarnShow();\n                }}\n                style={{\n                  marginTop: \"30px\",\n                  backgroundColor: \"#EA5455\",\n                  borderStyle: \"none\",\n                }}\n              >\n                평가입력\n              </Button>\n            </div>\n          ) : (\n            <div style={{ width: \"80%\" }}>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <BsPinFill style={{ fontSize: \"32px\", color: \"#EA5455\" }} />\n                <div\n                  style={{ borderBottom: \"2px solid #EA5455\", width: \"60%\" }}\n                >\n                  <input\n                    id=\"price\"\n                    style={{\n                      color: \"black\",\n                      width: \"70%\",\n                      fontSize: \"24px\",\n                      borderStyle: \"none\",\n                      backgroundColor: \"transparent\",\n                      textAlign: \"center\",\n                    }}\n                    defaultValue={calculateValue.avg}\n                    disabled\n                  />\n                </div>\n                <span style={{ fontSize: \"32px\" }}>원</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"container-lg d-flex justify-content-center\">\n        <div style={{ display: \"flex\", width: \"800px\", justifyContent: \"end\" }}>\n          <div style={{ fontSize: \"24px\" }}>\n            <GrView />\n            <span style={{ padding: \"0 10px\" }}>\n              {item == null ? null : item.rcount}\n            </span>\n            <span id=\"like\" className=\"\">\n              <AiFillLike\n                onClick={async (e) => {\n                  let like = document.getElementById(\"like\");\n                  let dislike = document.getElementById(\"dislike\");\n                  console.log(like);\n                  await axios({\n                    url: \"/like\",\n                    method: \"get\",\n                    params: {\n                      mno: userInfo.mno,\n                      bno: item.bno,\n                    },\n                  }).then((res) => {\n                    readList();\n                  });\n\n                  if (like.getAttribute(\"class\") === \"\") {\n                    dislike.setAttribute(\"class\", \"\");\n                    like.setAttribute(\"class\", \"active\");\n                  } else if (like.getAttribute(\"class\") === \"active\") {\n                    like.setAttribute(\"class\", \"\");\n                  }\n                }}\n                style={{ cursor: \"pointer\" }}\n              />\n            </span>\n            <span style={{ padding: \"0 10px\" }}>\n              {item == null ? null : item.blike}\n            </span>\n            <span id=\"dislike\" className=\"\">\n              <AiFillDislike\n                onClick={async (e) => {\n                  let like = document.getElementById(\"like\");\n                  let dislike = document.getElementById(\"dislike\");\n                  console.log(dislike);\n                  await axios({\n                    url: \"/dislike\",\n                    method: \"get\",\n                    params: {\n                      mno: userInfo.mno,\n                      bno: item.bno,\n                    },\n                  }).then((res) => {\n                    readList();\n                  });\n\n                  if (dislike.getAttribute(\"class\") === \"\") {\n                    like.setAttribute(\"class\", \"\");\n                    dislike.setAttribute(\"class\", \"active\");\n                  } else if (dislike.getAttribute(\"class\") === \"active\") {\n                    dislike.setAttribute(\"class\", \"\");\n                  }\n                }}\n                style={{ cursor: \"pointer\" }}\n              />\n            </span>\n            <span style={{ padding: \"0 10px\" }}>\n              {item == null ? null : item.bdislike}\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* end value input */}\n\n      {/* start reply box */}\n      <ReplyPagination bno={bno} />\n      <div className=\"container-lg d-flex justify-content-center\">\n        <div style={{ width: \"100%\" }}>\n          <textarea\n            id=\"rcontent\"\n            placeholder=\"댓글을 입력하세요\"\n            style={{ width: \"70%\", height: \"100px\", resize: \"none\" }}\n          />\n          <div style={{ display: \"flex\", justifyContent: \"end\", width: \"85%\" }}>\n            <Button\n              onClick={async () => {\n                let rcontent = document.getElementById(\"rcontent\");\n\n                await axios({\n                  url: \"http://localhost:3000/InsertReply\",\n                  method: \"post\",\n                  data: {\n                    mno: userInfo.mno,\n                    bno: item.bno,\n                    replyer: userInfo.nick ? userInfo.nick : \"anonymous\",\n                    rcontent: rcontent.value,\n                  },\n                  headers: {\n                    \"XSRF-TOKEN\": csrf,\n                  },\n                }).then((res) => {\n                  console.log(res);\n                  dispatch({\n                    type: \"insertReply\",\n                    payload: res.data,\n                  });\n                  rcontent.value = \"\";\n                });\n              }}\n              style={{ backgroundColor: \"#EA5455\", borderStyle: \"none\" }}\n            >\n              댓글등록\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* end reply box */}\n\n      {/* start board list box */}\n      <BoardListPagination />\n      {/* end reply box */}\n\n      {/* warn value modal start */}\n      <Modal\n        show={warnvalueshow}\n        onHide={handleWarnClose}\n        style={{ fontFamily: \"'Do Hyeon', sans-serif\" }}\n      >\n        <Modal.Header>\n          <Modal.Title>⚠️ 주의 ⚠️</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          정말로 이 가격으로 평가하시겠습니까?\n          <br />\n          평가하신 금액은 추후 변경할 수 없습니다.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleWarnClose}>\n            취소\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={async () => {\n              let price = document.getElementById(\"price\");\n\n              await axios({\n                url: \"/RegisterValue\",\n                method: \"POST\",\n                data: {\n                  bno: item.bno,\n                  price: price.value,\n                },\n              }).then((res) => {\n                console.log(res.data[0].price === -1);\n                if (res.data === \"\") {\n                  console.log(\"same user\");\n                  SetwarnDuplication(true);\n                  readValueList();\n                  handleWarnClose();\n                } else if (res.data[0].price === -1) {\n                  console.log(\"자신의 게시물임\");\n                  SetwarnSelfValue(true);\n                  readValueList();\n                  handleWarnClose();\n                } else {\n                  console.log(res.data);\n                  dispatch({\n                    type: \"valuelog\",\n                    payload: res.data,\n                  });\n                }\n              });\n\n              await readCalculateValue();\n\n              price.value = \"\";\n\n              handleWarnClose();\n            }}\n          >\n            평가확정\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {/* warn value modal end */}\n\n      {/* login modal start */}\n      <Modal\n        show={loginShow}\n        onHide={handleLoginShow}\n        style={{ fontFamily: \"'Do Hyeon', sans-serif\" }}\n      >\n        <Modal.Header>\n          <Modal.Title>⚠️ 로그인이 필요한 서비스입니다! ⚠️</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          평가를 하시려면 로그인이 필요합니다.\n          <br />\n          로그인을 하시거나 회원이 아니시라면 회원가입 후 이용 부탁드립니다.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleLoginClose}>\n            취소\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              handleLoginClose();\n              navigate(\"/login\");\n            }}\n          >\n            로그인하러 가기\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {/* login modal end */}\n\n      {/* value end button  start*/}\n\n      {/* value end button  end*/}\n    </div>\n  );\n};\n\nexport default DetailBoard;\n","/Users/sumin/Desktop/howmuch_front/src/components/ItemCard.js",["100"],"import React, { useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport noImage from \"../img/noImage.svg\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { RiVipCrownFill } from \"react-icons/ri\";\n\nconst ItemCard = (props) => {\n  // let tags = props.item.tagList;\n\n  // let tagsArray = tags.split(\",\");\n  // console.log(tagsArray);\n\n  // tier reader\n  const tierSelect = (point) => {\n    if (point < 250) {\n      // SetTier(\"Bronze\");\n      return \"Bronze\";\n    } else if (point < 500) {\n      // SetTier(\"Silver\");\n      return \"Silver\";\n    } else if (point < 750) {\n      // SetTier(\"Gold\");\n      return \"Gold\";\n    } else if (point < 1000) {\n      // SetTier(\"Platinum\");\n      return \"Platinum\";\n    } else if (point >= 1000) {\n      // SetTier(\"Diamond\");\n      return \"Diamond\";\n    } else {\n      return \"Bronze\";\n    }\n  };\n\n  const tierObject = [\n    { tier: \"Diamond\", color: \"#548CFF\" },\n    { tier: \"Platinum\", color: \"#00BDAA\" },\n    { tier: \"Gold\", color: \"#FFE300\" },\n    { tier: \"Silver\", color: \"#C8C2BC\" },\n    { tier: \"Bronze\", color: \"#E26A2C\" },\n  ];\n\n  const findTier = (userTier) => {\n    console.log(userTier);\n\n    let findItem = tierObject.find((item) => {\n      return item.tier === userTier;\n    });\n\n    console.log(findItem);\n    console.log(findItem.color);\n\n    return findItem.color;\n  };\n\n  // findTier(tierSelect(포인트 데이터))\n  // tier reader end\n\n  return (\n    <div style={{ margin: \"20px auto\" }}>\n      <Card style={{ width: \"300px\", color: \"white\", padding: \"10px\" }}>\n        <Card.Img\n          variant=\"top\"\n          src={\n            props.item.imageList === null ? noImage : props.item.imageList[0]\n          }\n          style={{\n            border: \"2px solid #2D4059\",\n            width: \"280px\",\n            height: \"200px\",\n          }}\n        />\n        <Card.Body style={{ padding: \"1rem 0\" }}>\n          <div style={{ display: \"flex\" }}>\n            <Card.Title\n              style={{\n                width: \"300px\",\n                height: \"40px\",\n                textAlign: \"left\",\n                backgroundColor: \"#2D4059\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {props.item == null ? null : props.item.title}\n            </Card.Title>\n          </div>\n          <div style={{ display: \"flex\" }}>\n            <p\n              style={{\n                maxWidth: \"300px\",\n                height: \"40px\",\n                backgroundColor: \"#2D4059\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {props.item == null ? null : (\n                <span>\n                  <RiVipCrownFill\n                    color={findTier(tierSelect(props.item.point))}\n                  />{\" \"}\n                  {props.item.writer}\n                </span>\n              )}\n            </p>\n          </div>\n\n          {/* <Card.Text\n            style={{\n              height: \"150px\",\n              backgroundColor: \"#2D4059\",\n              borderRadius: \"5px\",\n              padding: \"10px\",\n              overflow: \"hidden\",\n            }}\n          >\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </Card.Text> */}\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <p\n              style={{\n                width: \"70px\",\n                height: \"40px\",\n                backgroundColor: \"#2D4059\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n                marginBottom: \"0\",\n              }}\n            >\n              제시가\n            </p>\n            <BsFillCaretRightFill\n              style={{ color: \"#EA5455\", fontSize: \"32px\" }}\n            />\n            <div\n              style={{\n                color: \"black\",\n                width: \"250px\",\n                fontSize: \"24px\",\n                borderBottom: \"2px solid #2D4059\",\n              }}\n            >\n              {props.item == null\n                ? null\n                : props.item.suggestion\n                ? props.item.suggestion + \" 원\"\n                : \"없음\"}\n            </div>\n          </div>\n          <div style={{ marginTop: \"20px\", textAlign: \"left\" }}>\n            {props.item == null\n              ? null\n              : props.item.tag === \"not\"\n              ? null\n              : props.item.tagList.map((item, index) => {\n                  return (\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        maxWidth: \"280px\",\n                        height: \"40px\",\n                        backgroundColor: \"#2D4059\",\n                        borderRadius: \"5px\",\n                        padding: \"10px\",\n                        marginBottom: \"0\",\n                        marginRight: \"10px\",\n                        textOverflow: \"ellipsis\",\n                        overflow: \"hidden\",\n                        whiteSpace: \"nowrap\",\n                      }}\n                      key={index}\n                    >\n                      #{item}\n                    </span>\n                  );\n                })}\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default ItemCard;\n","/Users/sumin/Desktop/howmuch_front/src/components/BoardListPagination.js",[],"/Users/sumin/Desktop/howmuch_front/src/components/ReplyPagination.js",["101"],"import React, { useEffect, useState } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { AiFillLike, AiFillDislike } from \"react-icons/ai\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { RiVipCrownFill } from \"react-icons/ri\";\nimport \"../css/DetailBoard.css\";\n\nconst ReplyPagination = (props) => {\n  const checkLogin = async () => {\n    await axios\n      .get(\"/checklogin\")\n      .then((result) => {\n        SetCheckUser(result.data);\n        console.log(result.data);\n      })\n      .catch((err) => {\n        console.log(\"please login\");\n      });\n  };\n\n  const getMyInfo = async () => {\n    await axios\n      .get(\"/userinfo\")\n      .then((result) => {\n        console.log(result.data);\n        SetInfo(result.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  let [userInfo, SetInfo] = useState(\"\");\n\n  const readReplyList = async () => {\n    await axios({\n      url: \"http://localhost:8181/ReadReplyList\",\n      params: {\n        bno: props.bno,\n      },\n    }).then((res) => {\n      console.log(res.data);\n      dispatch({\n        type: \"readReply\",\n        payload: res.data,\n      });\n    });\n  };\n\n  useEffect(() => {\n    getMyInfo();\n    checkLogin();\n    readReplyList();\n  }, []);\n\n  let [checkUser, SetCheckUser] = useState(\"\");\n\n  let state = useSelector((state) => {\n    return state;\n  });\n\n  let navigate = useNavigate();\n\n  let dispatch = useDispatch();\n\n  let replyState = state.replyReducer;\n\n  // tier reader\n  const tierSelect = (point) => {\n    if (point < 250) {\n      // SetTier(\"Bronze\");\n      return \"Bronze\";\n    } else if (point < 500) {\n      // SetTier(\"Silver\");\n      return \"Silver\";\n    } else if (point < 750) {\n      // SetTier(\"Gold\");\n      return \"Gold\";\n    } else if (point < 1000) {\n      // SetTier(\"Platinum\");\n      return \"Platinum\";\n    } else {\n      // SetTier(\"Diamond\");\n      return \"Diamond\";\n    }\n  };\n\n  const tierObject = [\n    { tier: \"Diamond\", color: \"#548CFF\" },\n    { tier: \"Platinum\", color: \"#00BDAA\" },\n    { tier: \"Gold\", color: \"#FFE300\" },\n    { tier: \"Silver\", color: \"#C8C2BC\" },\n    { tier: \"Bronze\", color: \"#E26A2C\" },\n  ];\n\n  const findTier = (userTier) => {\n    console.log(userTier);\n\n    let findItem = tierObject.find((item) => {\n      return item.tier === userTier;\n    });\n\n    console.log(findItem);\n    console.log(findItem.color);\n\n    return findItem.color;\n  };\n\n  // findTier(tierSelect(포인트 데이터))\n  // tier reader end\n\n  // pagination data\n  const items = replyState;\n\n  // styled component\n  let Reply = styled(\"div\")`\n    background-color: #2d4059;\n    color: white;\n    display: flex;\n    justify-content: space-between;\n    padding: 10px;\n    margin-top: 20px;\n    border-radius: 12px;\n  `;\n\n  // pagination\n  function Items({ currentItems }) {\n    return (\n      <>\n        <div className=\"container-lg d-flex justify-content-center\">\n          <div style={{ width: \"800px\", marginTop: \"100px\" }}>\n            <div\n              style={{\n                fontSize: \"24px\",\n                borderBottom: \"2px solid #2D4059\",\n                textAlign: \"left\",\n              }}\n            >\n              <span>댓글</span>\n            </div>\n            {currentItems &&\n              currentItems.map((item, index) => (\n                <Reply className=\"row\" key={index}>\n                  <div className=\"col-lg-7\" style={{ textAlign: \"left\" }}>\n                    {item == null ? null : item.rcontent}\n                  </div>\n                  <div\n                    className=\"col-lg-5\"\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"end\",\n                    }}\n                  >\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        width: \"90px\",\n                        paddingRight: \"10px\",\n                        textOverflow: \"ellipsis\",\n                        overflow: \"hidden\",\n                        whiteSpace: \"nowrap\",\n                      }}\n                    >\n                      {item == null ? null : item.replyer === \"anonymous\" ? (\n                        \"익명\"\n                      ) : (\n                        <span>\n                          <RiVipCrownFill\n                            color={findTier(tierSelect(item.point))}\n                          />{\" \"}\n                          {item.replyer}\n                        </span>\n                      )}\n                    </span>\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        paddingRight: \"10px\",\n                        width: \"180px\",\n                      }}\n                    >\n                      {item == null\n                        ? null\n                        : item.rdate === \"2021/00/00\"\n                        ? null\n                        : String(\n                            new Date(+new Date(item.rdate) + 3240 * 10000)\n                              .toISOString()\n                              .replace(\"T\", \" \")\n                              .replace(/\\..*/, \"\")\n                          )}\n                    </span>\n                    <AiFillLike\n                      onClick={async (e) => {\n                        let like = document.getElementById(\"like\");\n                        let dislike = document.getElementById(\"dislike\");\n                        console.log(like);\n                        await axios({\n                          url: \"/Rlike\",\n                          method: \"get\",\n                          params: {\n                            mno: userInfo.mno,\n                            bno: item.bno,\n                            rno: item.rno,\n                          },\n                        }).then((res) => {\n                          readReplyList();\n                        });\n\n                        if (like.getAttribute(\"class\") === \"\") {\n                          dislike.setAttribute(\"class\", \"\");\n                          like.setAttribute(\"class\", \"active\");\n                        } else if (like.getAttribute(\"class\") === \"active\") {\n                          like.setAttribute(\"class\", \"\");\n                        }\n                      }}\n                      style={{ color: \"#EA5455\", cursor: \"pointer\" }}\n                    />\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        paddingRight: \"10px\",\n                      }}\n                    >\n                      {item == null ? null : item.rlike}\n                    </span>\n                    <AiFillDislike\n                      onClick={async (e) => {\n                        let like = document.getElementById(\"like\");\n                        let dislike = document.getElementById(\"dislike\");\n                        console.log(dislike);\n                        await axios({\n                          url: \"/Rdislike\",\n                          method: \"get\",\n                          params: {\n                            mno: userInfo.mno,\n                            bno: item.bno,\n                            rno: item.rno,\n                          },\n                        }).then((res) => {\n                          readReplyList();\n                        });\n\n                        if (dislike.getAttribute(\"class\") === \"\") {\n                          like.setAttribute(\"class\", \"\");\n                          dislike.setAttribute(\"class\", \"active\");\n                        } else if (dislike.getAttribute(\"class\") === \"active\") {\n                          dislike.setAttribute(\"class\", \"\");\n                        }\n                      }}\n                      style={{ color: \"#F07B3F\", cursor: \"pointer\" }}\n                    />\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        paddingRight: \"10px\",\n                      }}\n                    >\n                      {item == null ? null : item.rdislike}\n                    </span>\n                    {!checkUser ? null : (\n                      <span\n                        id={item == null ? \"\" : item.rno}\n                        onClick={async (e) => {\n                          let target = e.currentTarget;\n                          console.log(parseInt(target.id));\n                          console.log(item.bno);\n\n                          await axios({\n                            url: \"/DeleteReply\",\n                            method: \"delete\",\n                            params: {\n                              rno: parseInt(target.id),\n                              bno: item.bno,\n                              replyer: item.replyer,\n                            },\n                          })\n                            .then((res) => {\n                              console.log(res.data);\n                              dispatch({\n                                type: \"deleteReply\",\n                                payload: res.data,\n                              });\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              navigate(\"/login\");\n                            });\n                        }}\n                        style={{\n                          display: \"inline-block\",\n                          marginTop: \"-5px\",\n                          cursor: \"pointer\",\n                        }}\n                      >\n                        <MdDeleteForever />\n                      </span>\n                    )}\n                  </div>\n                </Reply>\n              ))}\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  function PaginatedItems({ itemsPerPage }) {\n    // We start with an empty list of items.\n    const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0);\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useState(0);\n\n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]);\n\n    // Invoke when user click to request another page.\n    const handlePageClick = (event) => {\n      const newOffset = (event.selected * itemsPerPage) % items.length;\n      console.log(\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\n      );\n      setItemOffset(newOffset);\n    };\n\n    return (\n      <>\n        <Items currentItems={currentItems} />\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginTop: \"30px\",\n          }}\n        >\n          <ReactPaginate\n            nextLabel=\">\"\n            onPageChange={handlePageClick}\n            pageRangeDisplayed={5}\n            marginPagesDisplayed={0}\n            pageCount={pageCount}\n            previousLabel=\"<\"\n            pageClassName=\"page-item\"\n            pageLinkClassName=\"page-link\"\n            previousClassName=\"page-item\"\n            previousLinkClassName=\"page-link\"\n            nextClassName=\"page-item\"\n            nextLinkClassName=\"page-link\"\n            breakLabel=\"\"\n            breakClassName=\"page-item\"\n            breakLinkClassName=\"page-link\"\n            containerClassName=\"pagination\"\n            activeClassName=\"active\"\n            renderOnZeroPageCount={null}\n          />\n        </div>\n      </>\n    );\n  }\n  // end pagination\n  return (\n    <div>\n      <PaginatedItems itemsPerPage={6} />\n    </div>\n  );\n};\n\nexport default ReplyPagination;\n",{"ruleId":"102","severity":1,"message":"103","line":13,"column":8,"nodeType":"104","messageId":"105","endLine":13,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":59,"column":6,"nodeType":"108","endLine":59,"endColumn":8,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"110","line":71,"column":8,"nodeType":"104","messageId":"105","endLine":71,"endColumn":14},{"ruleId":"106","severity":1,"message":"111","line":33,"column":6,"nodeType":"108","endLine":33,"endColumn":8,"suggestions":"112"},{"ruleId":"106","severity":1,"message":"113","line":108,"column":6,"nodeType":"108","endLine":108,"endColumn":8,"suggestions":"114"},{"ruleId":"106","severity":1,"message":"115","line":64,"column":6,"nodeType":"108","endLine":64,"endColumn":8,"suggestions":"116"},{"ruleId":"106","severity":1,"message":"117","line":59,"column":6,"nodeType":"108","endLine":59,"endColumn":8,"suggestions":"118"},{"ruleId":"102","severity":1,"message":"110","line":71,"column":8,"nodeType":"104","messageId":"105","endLine":71,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":38,"column":18,"nodeType":"121","messageId":"122","endLine":38,"endColumn":43},{"ruleId":"119","severity":1,"message":"120","line":39,"column":19,"nodeType":"121","messageId":"122","endLine":39,"endColumn":36},{"ruleId":"106","severity":1,"message":"107","line":38,"column":6,"nodeType":"108","endLine":38,"endColumn":8,"suggestions":"123"},{"ruleId":"102","severity":1,"message":"124","line":245,"column":25,"nodeType":"104","messageId":"105","endLine":245,"endColumn":34},{"ruleId":"102","severity":1,"message":"125","line":21,"column":7,"nodeType":"104","messageId":"105","endLine":21,"endColumn":15},{"ruleId":"102","severity":1,"message":"124","line":208,"column":25,"nodeType":"104","messageId":"105","endLine":208,"endColumn":34},{"ruleId":"106","severity":1,"message":"126","line":124,"column":6,"nodeType":"108","endLine":124,"endColumn":8,"suggestions":"127"},{"ruleId":"102","severity":1,"message":"128","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":26},{"ruleId":"106","severity":1,"message":"129","line":59,"column":6,"nodeType":"108","endLine":59,"endColumn":8,"suggestions":"130"},"no-unused-vars","'TestLogin' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'readList'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'search' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getMyInfo'. Either include it or remove the dependency array.",["132"],"React Hook useEffect has missing dependencies: 'getBoardRank' and 'getTierRank'. Either include them or remove the dependency array.",["133"],"React Hook useEffect has missing dependencies: 'checkLogin', 'readHotList', and 'readList'. Either include them or remove the dependency array.",["134"],"React Hook useEffect has a missing dependency: 'readHotList'. Either include it or remove the dependency array.",["135"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["136"],"'base64Obj' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMyInfo', 'readCalculateValue', 'readList', 'readReplyList', 'readValueList', and 'upreadCount'. Either include them or remove the dependency array.",["137"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'readReplyList'. Either include it or remove the dependency array.",["138"],{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"139","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [readList]",{"range":"154","text":"155"},"Update the dependencies array to be: [getMyInfo]",{"range":"156","text":"157"},"Update the dependencies array to be: [getBoardRank, getTierRank]",{"range":"158","text":"159"},"Update the dependencies array to be: [checkLogin, readHotList, readList]",{"range":"160","text":"161"},"Update the dependencies array to be: [readHotList]",{"range":"162","text":"163"},{"range":"164","text":"155"},"Update the dependencies array to be: [getMyInfo, readCalculateValue, readList, readReplyList, readValueList, upreadCount]",{"range":"165","text":"166"},"Update the dependencies array to be: [readReplyList]",{"range":"167","text":"168"},[1400,1402],"[readList]",[915,917],"[getMyInfo]",[2596,2598],"[getBoardRank, getTierRank]",[1697,1699],"[checkLogin, readHotList, readList]",[1411,1413],"[readHotList]",[931,933],[2945,2947],"[getMyInfo, readCalculateValue, readList, readReplyList, readValueList, upreadCount]",[1475,1477],"[readReplyList]"]